import { defineStore } from 'pinia'
import { ref, computed, watch } from 'vue'
import type { Bubble, PhilosophyQuestion } from '@shared/types'
import { useSessionStore } from '@/app/stores/session.store'
import { useGameStore } from '@/app/stores/game.store'

interface LevelUpData {
  level: number
  title: string
  description: string
  icon: string
  currentXP: number
  xpGained: number
  unlockedFeatures: string[]
}

interface PendingAchievement {
  title: string
  description: string
  icon: string
  xpReward: number
}

export const useModalStore = defineStore('modals', () => {
  const sessionStore = useSessionStore()
  const gameStore = useGameStore()
  
  // Welcome Modal
  const isWelcomeOpen = ref(false)
  
  // Bubble Modal
  const isBubbleModalOpen = ref(false)
  const currentBubble = ref<Bubble | null>(null)
  
  // Level Up Modal
  const isLevelUpModalOpen = ref(false)
  const currentLevel = ref(1)
  const levelUpData = ref<LevelUpData>({
    level: 1,
    title: '',
    description: '',
    icon: 'üëã',
    currentXP: 0,
    xpGained: 0,
    unlockedFeatures: []
  })
  
  // Philosophy Question Modal
  const isPhilosophyModalOpen = ref(false)
  const currentQuestion = ref<PhilosophyQuestion | null>(null)
  const philosophyBubbleId = ref<string | null>(null)
  
  // Game Over Modal
  const isGameOverModalOpen = ref(false)
  const gameOverStats = ref<{ currentXP: number; currentLevel: number } | null>(null)
  
  // Achievement Modal
  const isAchievementModalOpen = ref(false)
  const achievementData = ref<PendingAchievement | null>(null)
  
  const isAnyModalOpen = computed(() => {
    return isWelcomeOpen.value ||
           isBubbleModalOpen.value ||
           isLevelUpModalOpen.value ||
           isPhilosophyModalOpen.value ||
           isGameOverModalOpen.value ||
           isAchievementModalOpen.value
  })

  watch(isAnyModalOpen, (isModalVisible) => {
    if (!isModalVisible) {
      // –ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∞–Ω–∏–º–∞—Ü–∏–π
      window.dispatchEvent(new CustomEvent('process-shake-queue'))
    }
  })

  // –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const pendingAchievements = ref<PendingAchievement[]>([])
  
  // Computed –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–æ–¥–∞–ª–æ–∫ (–∏—Å–∫–ª—é—á–∞—è AchievementModal)
  const hasActiveModals = computed(() => {
    return isWelcomeOpen.value || 
           isBubbleModalOpen.value || 
           isLevelUpModalOpen.value || 
           isPhilosophyModalOpen.value || 
           isGameOverModalOpen.value
  })
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞ —Å—Ä–∞–∑—É
  const queueOrShowAchievement = (achievement: PendingAchievement) => {
    console.log(`üéØ queueOrShowAchievement called for: ${achievement.title}`)
    console.log(`üìä Modal states - levelUp: ${isLevelUpModalOpen.value}, hasActive: ${hasActiveModals.value}, achievement: ${isAchievementModalOpen.value}`)
    
    // –ï—Å–ª–∏ LevelUp –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ - –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å  
    if (isLevelUpModalOpen.value) {
      pendingAchievements.value.push(achievement)
      console.log(`üì• Achievement queued (LevelUp open): ${achievement.title}`)
      return
    }
    
    if (hasActiveModals.value) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      pendingAchievements.value.push(achievement)
      console.log(`üì• Achievement queued (other modals open): ${achievement.title}`)
    } else {
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª–æ–∫ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
      achievementData.value = achievement
      isAchievementModalOpen.value = true
      console.log(`üéâ Achievement shown immediately: ${achievement.title}`)
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const processPendingAchievements = () => {
    console.log(`üîÑ processPendingAchievements called. Queue length: ${pendingAchievements.value.length}, hasActiveModals: ${hasActiveModals.value}`)
    
    if (!hasActiveModals.value && pendingAchievements.value.length > 0) {
      const nextAchievement = pendingAchievements.value.shift()
      if (nextAchievement) {
        achievementData.value = nextAchievement
        isAchievementModalOpen.value = true
        console.log(`‚ñ∂Ô∏è Processing queued achievement: ${nextAchievement.title}`)
      }
    }
  }

  // Welcome Modal Actions
  const openWelcome = () => {
    isWelcomeOpen.value = true
  }

  const closeWelcome = () => {
    isWelcomeOpen.value = false
  }

  // Bubble Modal Actions
  const openBubbleModal = (bubble: Bubble) => {
    currentBubble.value = bubble
    isBubbleModalOpen.value = true
  }

  const closeBubbleModal = () => {
    isBubbleModalOpen.value = false
    currentBubble.value = null
    processPendingAchievements()
  }

  const continueBubbleModal = () => {
    const bubbleId = currentBubble.value?.id
    closeBubbleModal()
    
    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä—è
    if (bubbleId) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä—è
      window.dispatchEvent(new CustomEvent('bubble-continue', { detail: { bubbleId } }))
    }
  }

  // Level Up Modal Actions  
  const openLevelUpModal = (level: number, data?: Partial<LevelUpData>) => {
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ achievement –º–æ–¥–∞–ª–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    if (isAchievementModalOpen.value && achievementData.value) {
      pendingAchievements.value.unshift(achievementData.value) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
      isAchievementModalOpen.value = false
      achievementData.value = null
    }
    
    currentLevel.value = level
    
    if (data) {
      levelUpData.value = {
        level: data.level || level,
        title: data.title || '',
        description: data.description || '',
        icon: data.icon || 'üëã',
        currentXP: data.currentXP || 0,
        xpGained: data.xpGained || 0,
        unlockedFeatures: data.unlockedFeatures || []
      }
    }
    
    isLevelUpModalOpen.value = true
  }

  const closeLevelUpModal = () => {
    isLevelUpModalOpen.value = false
    processPendingAchievements()
  }

  // Philosophy Question Modal Actions
  const openPhilosophyModal = (question: PhilosophyQuestion, bubbleId?: string) => {
    currentQuestion.value = question
    philosophyBubbleId.value = bubbleId || null
    isPhilosophyModalOpen.value = true

  }

  const closePhilosophyModal = () => {
    isPhilosophyModalOpen.value = false
    currentQuestion.value = null
    philosophyBubbleId.value = null
    processPendingAchievements()
  }

  const handlePhilosophyAnswer = async (answer: 'agree' | 'disagree') => {
    if (!currentQuestion.value) return
    
    const bubbleId = philosophyBubbleId.value
    const isNegativeAnswer = answer === 'disagree'
    

    
    if (answer === 'agree') {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –¥–∞—Ç—å XP
      const leveledUp = await sessionStore.gainPhilosophyXP()
      if (leveledUp) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è
        const getLevelIcon = (level: number): string => {
          switch (level) {
            case 1: return 'üëã'
            case 2: return 'ü§î'
            case 3: return 'üìö'
            case 4: return 'ü§ù'
            case 5: return 'ü§úü§õ'
            default: return '‚≠ê'
          }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –∏–∑ contentLevels
        const levelData = gameStore.getLevelByNumber(sessionStore.currentLevel)
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è level-up –º–æ–¥–∞–ª–∫–∏
        const levelUpData = {
          level: sessionStore.currentLevel,
          title: levelData?.title || `–£—Ä–æ–≤–µ–Ω—å ${sessionStore.currentLevel}`,
          description: levelData?.description || '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å!',
          icon: getLevelIcon(sessionStore.currentLevel),
          currentXP: sessionStore.currentXP,
          xpGained: 10, // XP –∑–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø—É–∑—ã—Ä—å
          unlockedFeatures: (levelData as any)?.unlockedFeatures || []
        }
        
        openLevelUpModal(sessionStore.currentLevel, levelUpData)
      }
      
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∑–∞–±—Ä–∞—Ç—å –∂–∏–∑–Ω—å (–±–µ–∑ XP)
      const gameOver = await sessionStore.losePhilosophyLife()
      if (gameOver) {
        openGameOverModal({
          currentXP: sessionStore.currentXP,
          currentLevel: sessionStore.currentLevel
        })
      }
      
    }
    
    closePhilosophyModal()
    
    // –ü—É–∑—ã—Ä—å –≤—Å–µ–≥–¥–∞ –ª–æ–ø–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Ç–≤–µ—Ç–∞
    if (bubbleId) {

      window.dispatchEvent(new CustomEvent('bubble-continue', { 
        detail: { 
          bubbleId, 
          isPhilosophyNegative: isNegativeAnswer 
        } 
      }))
    } else {
      console.warn('‚ö†Ô∏è No bubbleId found for philosophy question!')
    }
  }

  // Game Over Modal Actions
  const openGameOverModal = (stats: { currentXP: number; currentLevel: number }) => {
    gameOverStats.value = stats
    isGameOverModalOpen.value = true
  }

  const closeGameOverModal = () => {
    isGameOverModalOpen.value = false
    gameOverStats.value = null
    processPendingAchievements()
  }

  const restartGame = async () => {
    await sessionStore.resetSession()
    closeGameOverModal()
    
    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å 2015 –≥–æ–¥–∞
    window.dispatchEvent(new CustomEvent('game-restart'))
  }

  // Achievement Modal Actions
  const openAchievementModal = (achievement: PendingAchievement) => {
    queueOrShowAchievement(achievement)
  }

  const closeAchievementModal = () => {
    console.log('‚ùå closeAchievementModal called')
    isAchievementModalOpen.value = false
    achievementData.value = null
    
    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    console.log('‚è∞ Scheduling processPendingAchievements')
    setTimeout(processPendingAchievements, 0)
  }

  return {
    // State
    isWelcomeOpen,
    isBubbleModalOpen,
    currentBubble,
    isLevelUpModalOpen,
    currentLevel,
    levelUpData,
    isPhilosophyModalOpen,
    currentQuestion,
    isGameOverModalOpen,
    gameOverStats,
    isAchievementModalOpen,
    achievementData,
    
    // Actions
    openWelcome,
    closeWelcome,
    openBubbleModal,
    closeBubbleModal,
    continueBubbleModal,
    openLevelUpModal,
    closeLevelUpModal,
    openPhilosophyModal,
    closePhilosophyModal,
    handlePhilosophyAnswer,
    openGameOverModal,
    closeGameOverModal,
    restartGame,
    openAchievementModal,
    closeAchievementModal,
    queueOrShowAchievement,
    processPendingAchievements
  }
}) 