import { ref, computed, nextTick } from 'vue'
import { useSessionStore, useModalStore, useLevelStore } from '@/stores'
import { useAchievement } from '@/composables/useAchievement'
import { useSession } from '@/composables/useSession'
import { getEventBridge } from '@/composables/useUi'
import { GAME_CONFIG, XP_CALCULATOR } from '@/config'
import type { NormalizedLevel, NormalizedAchievement } from '@/types/normalized'
import type { NormalizedBubble } from '@/types/normalized'
import type { BubbleNode } from '@/types/canvas'
import type { Question } from '@/types/data'
import type { ModalStates, PendingBubbleRemoval, CanvasBridge, PendingAchievement, EventChain } from '@/types/modals'
import { MODAL_PRIORITIES } from '@/types/modals'
import { useBonuses } from '@/composables/useBonuses'

let canvasBridge: CanvasBridge | null = null
let eventChainCompletedHandler: (() => void) | null = null

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä–µ–π
const pendingBubbleRemovals = ref<Array<PendingBubbleRemoval>>([])

export const setCanvasBridge = (bridge: CanvasBridge) => {
  canvasBridge = bridge
}

export const getCanvasBridge = (): CanvasBridge | null => {
  return canvasBridge
}

export const setEventChainCompletedHandler = (handler: () => void) => {
  eventChainCompletedHandler = handler
}

export const getEventChainCompletedHandler = (): (() => void) | null => {
  return eventChainCompletedHandler
}

export const useModals = () => {
  const sessionStore = useSessionStore()
  const modalStore = useModalStore()
  const levelStore = useLevelStore()
  const { unlockAchievement } = useAchievement()
  const { gainXP, losePhilosophyLife, visitBubble, startSession } = useSession()
  
  const isProcessingBubbleModal = ref(false)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Event Chain (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ modal store)
  const handleEventChainCompleted = () => {
    processPendingBubbleRemovals()
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è modal store
  setEventChainCompletedHandler(handleEventChainCompleted)

  const modals = computed(() => modalStore.modals)
  const data = computed(() => modalStore.data)
  
  const isAnyModalOpen = computed(() => 
    Object.values(modalStore.modals).some(v => v)
  )

  const hasActiveModals = computed(() =>
    modalStore.modals.welcome || 
    modalStore.modals.bubble || 
    modalStore.modals.levelUp || 
    modalStore.modals.philosophy || 
    modalStore.modals.gameOver ||
    modalStore.modals.achievement ||
    modalStore.modals.bonus
  )

  const addPendingBubbleRemoval = (removal: PendingBubbleRemoval) => {
    pendingBubbleRemovals.value.push(removal)
  }

  const processPendingBubbleRemovals = () => {
    if (!hasActiveModals.value && pendingBubbleRemovals.value.length > 0) {
      const canvas = getCanvasBridge()
      if (canvas) {
        pendingBubbleRemovals.value.forEach(removal => {
          canvas.removeBubble(removal.bubbleId, removal.xpAmount, removal.isPhilosophyNegative)
        })
        pendingBubbleRemovals.value = []
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫ –¥–ª—è Event Chains
  const closeModalWithLogic = (key: keyof ModalStates) => {
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ event chains - –∏—Å–ø–æ–ª—å–∑—É–µ–º closeCurrentModal
    if (modalStore.currentEventChain || modalStore.currentModal) {
      modalStore.closeCurrentModal()
    } else {
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
      modalStore.closeModal(key)
    }
    
    const bridge = getEventBridge()
    if (bridge) {
      bridge.processShakeQueue()
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä–µ–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª–æ–∫
    setTimeout(() => {
      processPendingBubbleRemovals()
    }, 50)
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–µ–ø–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—É–∑—ã—Ä—è
  const startBubbleEventChain = async (bubble: BubbleNode) => {
    if (isProcessingBubbleModal.value) {
      return
    }
    
    isProcessingBubbleModal.value = true

    try {
      // –ü–æ—Å–µ—â–∞–µ–º –ø—É–∑—ã—Ä—å –∏ –ø–æ–ª—É—á–∞–µ–º XP
      visitBubble(bubble.id)
      const xpGained = XP_CALCULATOR.getBubbleXP(bubble.skillLevel || 'novice')
      let xpResult = await gainXP(xpGained)

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–∑—ã—Ä—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      addPendingBubbleRemoval({
        bubbleId: bubble.id,
        xpAmount: xpGained,
        isPhilosophyNegative: false
      })

      // –°–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–µ –∞—á–∏–≤–∫–∏ (bubble-explorer)
      const achievements: PendingAchievement[] = []
      const bubblesCount = sessionStore.visitedBubbles.length
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–∑—ã—Ä–µ–π
      if (bubblesCount === 10) {
        const achievement = await unlockAchievement('bubble-explorer-10')
        if (achievement) {
          achievements.push({
            title: achievement.name,
            description: achievement.description,
            icon: achievement.icon,
            xpReward: achievement.xpReward
          })
        }
      } else if (bubblesCount === 30) {
        const achievement = await unlockAchievement('bubble-explorer-30')
        if (achievement) {
          achievements.push({
            title: achievement.name,
            description: achievement.description,
            icon: achievement.icon,
            xpReward: achievement.xpReward
          })
        }
      } else if (bubblesCount === 50) {
        const achievement = await unlockAchievement('bubble-explorer-50')
        if (achievement) {
          achievements.push({
            title: achievement.name,
            description: achievement.description,
            icon: achievement.icon,
            xpReward: achievement.xpReward
          })
        }
      }

      // –°–æ–±–∏—Ä–∞–µ–º –û–¢–î–ï–õ–¨–ù–û level –∞—á–∏–≤–∫–∏
      const levelAchievements: PendingAchievement[] = []
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º level up –¥–∞–Ω–Ω—ã–µ
      let pendingLevelUp = null

      if (xpResult.leveledUp) {
        pendingLevelUp = {
          level: xpResult.newLevel!,
          data: xpResult.levelData
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—á–∏–≤–∫—É –∑–∞ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –í –û–¢–î–ï–õ–¨–ù–´–ô –ú–ê–°–°–ò–í
        if (xpResult.newLevel === 2) {
          const levelAchievement = await unlockAchievement('first-level-master')
          if (levelAchievement) {
            // –ü–æ–ª—É—á–∞–µ–º XP –æ—Ç level achievement —Ç–æ–∂–µ
            const levelXpResult = await gainXP(levelAchievement.xpReward)
            levelAchievements.push({
              title: levelAchievement.name,
              description: levelAchievement.description,
              icon: levelAchievement.icon,
              xpReward: levelAchievement.xpReward
            })
            // –û–±–Ω–æ–≤–ª—è–µ–º xpResult –µ—Å–ª–∏ level achievement –¥–∞–ª –µ—â–µ level up
            if (levelXpResult.leveledUp) {
              xpResult = levelXpResult
              pendingLevelUp = {
                level: xpResult.newLevel!,
                data: xpResult.levelData
              }
            }
          }
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º Event Chain —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏
      modalStore.startEventChain({
        type: 'bubble',
        pendingAchievements: achievements,           // –¢–æ–ª—å–∫–æ bubble –∞—á–∏–≤–∫–∏
        pendingLevelAchievements: levelAchievements, // –û—Ç–¥–µ–ª—å–Ω–æ level –∞—á–∏–≤–∫–∏
        pendingLevelUp,
        currentStep: 'bubble',
        context: {
          bubble,
          xpResult
        }
      })

    } finally {
      isProcessingBubbleModal.value = false
    }
  }

  // Welcome Modal
  const openWelcome = () => {
    modalStore.enqueueModal({
      type: 'welcome',
      data: null,
      priority: MODAL_PRIORITIES.welcome
    })
  }
  
  const closeWelcome = () => closeModalWithLogic('welcome')

  // Bubble Modal  
  const openBubbleModal = (bubble: BubbleNode) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Event Chains
    startBubbleEventChain(bubble)
  }

  const continueBubbleModal = async () => {
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, Event Chain —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ü–µ–ø–æ—á–∫—É
    closeModalWithLogic('bubble')
  }

  // Level Up Modal
  const openLevelUpModal = (level: number, payload?: any) => {
    // Level Up Modal —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Event Chain
    const levelData = levelStore.getLevelByNumber(level)
    const icon = ['üëã', 'ü§î', 'üìö', 'ü§ù', 'ü§úü§õ'][level - 1] || '‚≠ê'
    
    modalStore.startEventChain({
      type: 'manual',
      pendingAchievements: [],
      pendingLevelAchievements: [],
      pendingLevelUp: {
        level: level,
        data: payload || {
          level: level,
          title: levelData?.title || `–£—Ä–æ–≤–µ–Ω—å ${level}`,
          description: levelData?.description || `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${level} —É—Ä–æ–≤–Ω—è!`,
          icon: icon,
          currentXP: sessionStore.session?.currentXP || 0,
          xpGained: 0,
          unlockedFeatures: levelData?.unlockedFeatures || []
        }
      },
      currentStep: 'levelUp',
      context: {}
    })
  }

  const closeLevelUpModal = () => closeModalWithLogic('levelUp')

  // Philosophy Modal
  const openPhilosophyModal = (question: Question, bubbleId?: BubbleNode['id']) => {
    modalStore.enqueueModal({
      type: 'philosophy',
      data: { question, bubbleId },
      priority: MODAL_PRIORITIES.philosophy
    })
  }

  const handlePhilosophyAnswer = async (optionId: string) => {
    const question = modalStore.data.currentQuestion
    const bubbleId = modalStore.data.philosophyBubbleId
    
    if (!question) return

    const selectedOption = question.options.find(o => String(o.id) === optionId)
    if (!selectedOption) return

    const isNegative = selectedOption.livesLost > 0
    
    // –ü–æ–º–µ—á–∞–µ–º –ø—É–∑—ã—Ä—å –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π –°–†–ê–ó–£
    if (bubbleId) {
      await visitBubble(bubbleId)
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç agreementLevel
    const xpAmount = XP_CALCULATOR.getPhilosophyXP(selectedOption.agreementLevel)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    let xpResult = null
    if (isNegative) {
      const isGameOver = await losePhilosophyLife()
      if (isGameOver) {
        closeModalWithLogic('philosophy')
        openGameOverModal()
        return
      }
    } else {
      // –ù–∞—á–∏—Å–ª—è–µ–º XP —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
      xpResult = await gainXP(xpAmount)
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ü–ï–†–ï–î –ø–æ–∫–∞–∑–æ–º –∞—á–∏–≤–∫–∏
    closeModalWithLogic('philosophy')

    // –í—ã–¥–∞–µ–º –∞—á–∏–≤–∫—É –∑–∞ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø—É–∑—ã—Ä—å (–ª—é–±–æ–π –æ—Ç–≤–µ—Ç)
    const achievement = await unlockAchievement('philosophy-master')
    if (achievement) {
      const achievementResult = await gainXP(achievement.xpReward)
      
      // –°–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–µ –∞—á–∏–≤–∫–∏ (philosophy)
      const achievements: PendingAchievement[] = [{
        title: achievement.name,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward
      }]

      // –°–æ–±–∏—Ä–∞–µ–º –û–¢–î–ï–õ–¨–ù–û level –∞—á–∏–≤–∫–∏
      const levelAchievements: PendingAchievement[] = []

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π xpResult (–æ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ + –æ—Ç –∞—á–∏–≤–∫–∏)
      let finalXpResult = achievementResult.leveledUp ? achievementResult : xpResult

      // –î–æ–±–∞–≤–ª—è–µ–º level achievement –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è 2
      if (finalXpResult && finalXpResult.leveledUp && finalXpResult.newLevel === 2) {
        const levelAchievement = await unlockAchievement('first-level-master')
        if (levelAchievement) {
          // –ü–æ–ª—É—á–∞–µ–º XP –æ—Ç level achievement —Ç–æ–∂–µ
          const levelXpResult = await gainXP(levelAchievement.xpReward)
          levelAchievements.push({
            title: levelAchievement.name,
            description: levelAchievement.description,
            icon: levelAchievement.icon,
            xpReward: levelAchievement.xpReward
          })
          // –û–±–Ω–æ–≤–ª—è–µ–º finalXpResult –µ—Å–ª–∏ level achievement –¥–∞–ª –µ—â–µ level up
          if (levelXpResult.leveledUp) {
            finalXpResult = levelXpResult
          }
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º Event Chain –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ø—É–∑—ã—Ä—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏
      modalStore.startEventChain({
        type: 'philosophy',
        pendingAchievements: achievements,           // –¢–æ–ª—å–∫–æ philosophy –∞—á–∏–≤–∫–∞
        pendingLevelAchievements: levelAchievements, // –û—Ç–¥–µ–ª—å–Ω–æ level –∞—á–∏–≤–∫–∏
        pendingLevelUp: finalXpResult && finalXpResult.leveledUp ? { 
          level: finalXpResult.newLevel!, 
          data: finalXpResult.levelData 
        } : null,
        currentStep: 'achievement', // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞—á–∏–≤–∫–∏
        context: { xpResult: finalXpResult, bubbleId: bubbleId || undefined }
      })
    } else if (xpResult && xpResult.leveledUp) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞—á–∏–≤–∫–∏, –Ω–æ –µ—Å—Ç—å level up - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ level up
      openLevelUpModal(xpResult.newLevel!, xpResult.levelData)
    }

    // –°—Ç–∞–≤–∏–º –ø—É–∑—ã—Ä—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if (bubbleId) {
      const canvas = getCanvasBridge()
      if (canvas) {
        canvas.removeBubble(bubbleId, xpAmount, isNegative)
      }
    }
  }

  const closePhilosophyModal = () => closeModalWithLogic('philosophy')

  // Game Over Modal
  const openGameOverModal = () => {
    modalStore.enqueueModal({
      type: 'gameOver',
      data: {
        currentXP: sessionStore.session?.currentXP || 0,
        currentLevel: sessionStore.session?.currentLevel || 1
      },
      priority: MODAL_PRIORITIES.gameOver
    })
  }
  
  const closeGameOverModal = () => closeModalWithLogic('gameOver')

  const restartGame = async () => {
    modalStore.clearQueue() // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –º–æ–¥–∞–ª–æ–∫ –∏ event chains
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
    const { resetBonuses } = useBonuses()
    resetBonuses()
    
    startSession()
    openWelcome()
    closeModalWithLogic('gameOver')
  }

  // Achievement Modal
  const openAchievementModal = (achievement: PendingAchievement) => {
    modalStore.enqueueModal({
      type: 'achievement',
      data: achievement,
      priority: MODAL_PRIORITIES.achievement
    })
  }

  const closeAchievementModal = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
    if (modalStore.pendingAchievements.length > 0) {
      const next = modalStore.getNextPendingAchievement()
      if (next) {
        modalStore.setAchievement(next)
        return // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
      }
    }
    
    closeModalWithLogic('achievement')
    modalStore.setAchievement(null)
  }

  const closeBonusModal = () => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º BonusModal
    modalStore.closeModal('bonus')
    modalStore.setCurrentBonus(null)
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Event Chain –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    const pausedChain = sessionStorage.getItem('pausedEventChain')
    if (pausedChain) {
      sessionStorage.removeItem('pausedEventChain')
      const chain = JSON.parse(pausedChain)
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º LevelUp —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
      if (chain.currentStep === 'levelUp') {
        chain.currentStep = 'levelAchievement'
      }
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
      modalStore.startEventChain(chain)
      modalStore.processEventChain()
    }
  }

  const handleToughBubbleDestroyed = async () => {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞—á–∏–≤–∫—É –¥–ª—è tough –ø—É–∑—ã—Ä—è
    let achievement = await unlockAchievement('tough-bubble-popper')
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –ø—É–∑—ã—Ä—è
    if (!achievement) {
      achievement = await unlockAchievement('secret-bubble-discoverer')
    }
    
    if (achievement) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º XP –æ—Ç –∞—á–∏–≤–∫–∏
      let xpResult = await gainXP(achievement.xpReward)
      
      // –°–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–µ –∞—á–∏–≤–∫–∏ (tough-bubble-popper –∏–ª–∏ secret-bubble-discoverer)
      const achievements: PendingAchievement[] = [{
        title: achievement.name,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward
      }]

      // –°–æ–±–∏—Ä–∞–µ–º –û–¢–î–ï–õ–¨–ù–û level –∞—á–∏–≤–∫–∏
      const levelAchievements: PendingAchievement[] = []

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è 2 –æ—Ç –∞—á–∏–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º level achievement
      if (xpResult.leveledUp && xpResult.newLevel === 2) {
        const levelAchievement = await unlockAchievement('first-level-master')
        if (levelAchievement) {
          // –ü–æ–ª—É—á–∞–µ–º XP –æ—Ç level achievement —Ç–æ–∂–µ
          const levelXpResult = await gainXP(levelAchievement.xpReward)
          levelAchievements.push({
            title: levelAchievement.name,
            description: levelAchievement.description,
            icon: levelAchievement.icon,
            xpReward: levelAchievement.xpReward
          })
          // –û–±–Ω–æ–≤–ª—è–µ–º xpResult –µ—Å–ª–∏ level achievement –¥–∞–ª –µ—â–µ level up
          if (levelXpResult.leveledUp) {
            xpResult = levelXpResult
          }
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º Event Chain –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ/tough –ø—É–∑—ã—Ä—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏
      modalStore.startEventChain({
        type: 'manual',
        pendingAchievements: achievements,           // tough –∏–ª–∏ secret –∞—á–∏–≤–∫–∞
        pendingLevelAchievements: levelAchievements, // –û—Ç–¥–µ–ª—å–Ω–æ level –∞—á–∏–≤–∫–∏
        pendingLevelUp: xpResult.leveledUp ? { 
          level: xpResult.newLevel!, 
          data: xpResult.levelData 
        } : null,
        currentStep: 'achievement', // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞—á–∏–≤–∫–∏
        context: { xpResult }
      })
    }
  }

  return {
    // State
    modals,
    data,
    isAnyModalOpen,
    hasActiveModals,
    isProcessingBubbleModal,

    // Bridge
    addPendingBubbleRemoval,
    processPendingBubbleRemovals,

    // Event Chains
    startBubbleEventChain,

    // Welcome
    openWelcome,
    closeWelcome,

    // Bubble
    openBubbleModal,
    continueBubbleModal,

    // Level Up
    openLevelUpModal,
    closeLevelUpModal,

    // Philosophy
    openPhilosophyModal,
    handlePhilosophyAnswer,
    closePhilosophyModal,

    // Game Over
    openGameOverModal,
    closeGameOverModal,
    restartGame,

    // Achievement
    openAchievementModal,
    closeAchievementModal,

    // Bonus
    closeBonusModal,

    // Handlers
    handleToughBubbleDestroyed
  }



  return {
    // Event Chains
    startBubbleEventChain,

    // Welcome
    openWelcome,
    closeWelcome,

    // Bubble
    openBubbleModal,
    continueBubbleModal,

    // Level Up
    openLevelUpModal,
    closeLevelUpModal,

    // Philosophy
    openPhilosophyModal,
    handlePhilosophyAnswer,
    closePhilosophyModal,

    // Game Over
    openGameOverModal,
    closeGameOverModal,
    restartGame,

    // Achievement
    openAchievementModal,
    closeAchievementModal,

    // Bonus
    closeBonusModal,

    // Handlers
    handleToughBubbleDestroyed
  }
}