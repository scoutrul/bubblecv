import { ref, computed } from 'vue'
import { useSessionStore, useModalStore, useLevelStore } from '@/stores'
import { useAchievement } from '@/composables/useAchievement'
import { useSession } from '@/composables/useSession'
import { XP_CALCULATOR } from '@/config'
import { ModalUseCaseFactory } from '@/usecases/modal'
import type { NormalizedAchievement, NormalizedBonus, NormalizedMemoir } from '@/types/normalized'
import type { BubbleNode } from '@/types/canvas'
import type { Question } from '@/types/data'
import type { ModalStates, PendingBubbleRemoval, CanvasBridge, PendingAchievement, EventChain, XPResult, ModalDataUnion, LevelUpData } from '@/types/modals'
import type { 
  ModalSessionStore, 
  ModalLevelStore, 
  ModalAchievementStore, 
  ModalModalStore 
} from '@/usecases/modal'
import { MODAL_PRIORITIES } from '@/types/modals'

let canvasBridge: CanvasBridge | null = null
let eventChainCompletedHandler: (() => Promise<void>) | null = null

const pendingBubbleRemovals = ref<Array<PendingBubbleRemoval>>([])

export const setCanvasBridge = (bridge: CanvasBridge) => {
  canvasBridge = bridge
}

export const getCanvasBridge = (): CanvasBridge | null => {
  return canvasBridge
}

export const setEventChainCompletedHandler = (handler: () => Promise<void>) => {
  eventChainCompletedHandler = handler
}

export const getEventChainCompletedHandler = (): (() => Promise<void>) | null => {
  return eventChainCompletedHandler
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –°–æ–∑–¥–∞–µ—Ç PendingAchievement –∏–∑ Achievement –æ–±—ä–µ–∫—Ç–∞
 */
export const createPendingAchievement = (achievement: NormalizedAchievement): PendingAchievement => ({
  title: achievement.name,
  description: achievement.description,
  icon: achievement.icon,
  xpReward: achievement.xpReward
})

export const addPendingBubbleRemoval = (removal: PendingBubbleRemoval, requiresModal: boolean = true) => {
  if (!requiresModal) {
    // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
    const canvasBridge = getCanvasBridge()
    if (canvasBridge) {
      // –ù–∞—Ö–æ–¥–∏–º –ø—É–∑—ã—Ä—å –ø–æ ID –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
      canvasBridge.removeBubble(removal.bubbleId, removal.xpAmount, removal.isPhilosophyNegative)
    }
    return
  }
  
  pendingBubbleRemovals.value.push(removal)
}

export const useModals = () => {
  const sessionStore = useSessionStore()
  const modalStore = useModalStore()
  const levelStore = useLevelStore()
  const { unlockAchievement } = useAchievement()
  const { gainXP, losePhilosophyLife, visitBubble } = useSession()

  const isProcessingBubbleModal = ref(false)

  // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è stores
  const createAdapters = () => {
    return {
      sessionAdapter: {
        session: {
          currentXP: sessionStore.currentXP,
          currentLevel: sessionStore.currentLevel,
          visitedBubbles: sessionStore.visitedBubbles
        }
      } as ModalSessionStore,
      levelAdapter: {
        getLevelByNumber: (level: number) => levelStore.getLevelByNumber(level)
      } as ModalLevelStore,
      achievementAdapter: {
        unlockAchievement: (id: string, showModal?: boolean) => unlockAchievement(id, showModal)
      } as ModalAchievementStore,
      modalAdapter: {
        modals: modalStore.modals,
        data: modalStore.data,
        currentEventChain: modalStore.currentEventChain,
        currentModal: modalStore.currentModal,
        pendingAchievements: modalStore.pendingAchievements,
        pendingLevelAchievements: modalStore.pendingAchievements,
        enqueueModal: (modal: { type: keyof ModalStates; data: ModalDataUnion['data']; priority: number }) => modalStore.enqueueModal(modal),
        closeModal: (key: keyof ModalStates) => modalStore.closeModal(key),
        closeCurrentModal: () => modalStore.closeCurrentModal(),
        startEventChain: (chain: EventChain) => modalStore.startEventChain(chain),
        processEventChain: () => modalStore.processEventChain(),
        clearQueue: () => modalStore.clearQueue(),
        setAchievement: (achievement: PendingAchievement | null) => modalStore.setAchievement(achievement),
        getNextPendingAchievement: () => modalStore.getNextPendingAchievement(),
        setCurrentBonus: (bonus: NormalizedBonus) => modalStore.setCurrentBonus(bonus)
      } as ModalModalStore
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É use cases
  const createFactory = () => {
    const adapters = createAdapters()
    return new ModalUseCaseFactory(
      adapters.sessionAdapter,
      adapters.levelAdapter,
      adapters.achievementAdapter,
      adapters.modalAdapter
    )
  }

  const checkAndAddLevelAchievement = async (
    xpResult: { leveledUp: boolean; newLevel?: number; levelData?: { level: number; title?: string; description?: string; currentXP: number; xpGained: number; icon: string; isProjectTransition?: boolean } },
    levelAchievements: PendingAchievement[]
  ): Promise<void> => {
    // –ê—á–∏–≤–∫–∞ first-level-master —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π Event Chain –∫–æ–Ω—Ñ–∏–≥
   */
  const createEventChainConfig = (
    type: EventChain['type'],
    achievements: PendingAchievement[],
    levelAchievements: PendingAchievement[],
    xpResult: { leveledUp: boolean; newLevel?: number; levelData?: { level: number; title?: string; description?: string; currentXP: number; xpGained: number; icon: string; isProjectTransition?: boolean } },
    context: Record<string, unknown> = {}
  ) => {

    // –°–æ–∑–¥–∞–µ–º LevelUpData –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è level up
    const pendingLevelUp = xpResult?.leveledUp && xpResult.levelData ? {
      level: xpResult.newLevel!,
      data: {
        level: xpResult.levelData.level,
        title: xpResult.levelData.title || `–£—Ä–æ–≤–µ–Ω—å ${xpResult.newLevel}`,
        description: xpResult.levelData.description || `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${xpResult.newLevel} —É—Ä–æ–≤–Ω—è!`,
        icon: xpResult.levelData.icon,
        currentXP: xpResult.levelData.currentXP,
        xpGained: xpResult.levelData.xpGained,
        xpRequired: 0,
        isProjectTransition: (xpResult.levelData as any).isProjectTransition || false
      } as LevelUpData
    } : null
    
    return {
      id: Date.now().toString(),
      type,
      pendingAchievements: achievements,
      pendingLevelAchievements: levelAchievements,
      pendingLevelUp,
      currentStep: (type === 'manual') ? 'achievement' as const : 'achievement' as const,
      context
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç Event Chain
   */
  const processAchievementEventChain = async (
    achievementId: string,
    chainType: EventChain['type']
  ) => {
    const factory = createFactory()
    const useCaseModal = factory.createProcessAchievementEventChainUseCase()
    await useCaseModal.execute({ achievementId, chainType })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Event Chain (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ modal store)
  const handleEventChainCompleted = async () => {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É–∑—ã—Ä–µ–π
    Object.keys(modalStore.modals).forEach(key => {
      modalStore.modals[key as keyof typeof modalStore.modals] = false
    })
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π event chain
    modalStore.currentEventChain = null
    modalStore.currentModal = null
    
    await processPendingBubbleRemovals()
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è modal store
  setEventChainCompletedHandler(handleEventChainCompleted)

  const modals = computed(() => modalStore.modals)
  const data = computed(() => modalStore.data)

  const isAnyModalOpen = computed(() =>
    Object.values(modalStore.modals).some(v => v)
  )

  const hasActiveModals = computed(() =>
    modalStore.modals.welcome ||
    modalStore.modals.bubble ||
    modalStore.modals.levelUp ||
    modalStore.modals.philosophy ||
    modalStore.modals.gameOver ||
    modalStore.modals.achievement ||
    modalStore.modals.bonus
  )

  const processPendingBubbleRemovals = async () => {
    // Fallback: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É–∑—ã—Ä–∏ –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –º–æ–¥–∞–ª–∫–∏ "–∑–∞—Å—Ç—Ä—è–ª–∏", –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∏—Ö
    if (pendingBubbleRemovals.value.length > 0 && hasActiveModals.value) {
      Object.keys(modalStore.modals).forEach(key => {
        modalStore.modals[key as keyof typeof modalStore.modals] = false
      })
      modalStore.currentEventChain = null
      modalStore.currentModal = null
    }
    
    if (!hasActiveModals.value && pendingBubbleRemovals.value.length > 0) {
      const canvas = getCanvasBridge()
      if (canvas) {
        for (const removal of pendingBubbleRemovals.value) {
          // –î–æ–±–∞–≤–ª—è–µ–º XP —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π (–Ω–µ —Å–∫—Ä—ã—Ç—ã—Ö, –Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö)
          let xpResult = null
          if (removal.xpAmount > 0) {
            xpResult = await gainXP(removal.xpAmount)
            
            // –°–æ–∑–¥–∞–µ–º Floating Text –¥–ª—è XP –¥–ª—è –≤—Å–µ—Ö –ø—É–∑—ã—Ä–µ–π —Å XP > 0
            const bubble = canvas.findBubbleById(removal.bubbleId)
            if (bubble && removal.xpAmount > 0) {
              canvas.createFloatingText({
                x: bubble.x,
                y: bubble.y,
                text: `+${removal.xpAmount} XP`,
                type: 'xp',
                color: '#22c55e'
              })
            }
            
            // –°–æ–∑–¥–∞–µ–º Floating Text –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π
            if (bubble && removal.isPhilosophyNegative) {
              canvas.createFloatingText({
                x: bubble.x,
                y: bubble.y,
                text: '-üíî',
                type: 'life',
                color: '#ef4444'
              })
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º level up –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π
            if (xpResult.leveledUp && xpResult.levelData) {
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º level achievement –¥–ª—è 2 —É—Ä–æ–≤–Ω—è
            const levelAchievements: PendingAchievement[] = []
            // –ê—á–∏–≤–∫–∞ first-level-master —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
              
              modalStore.startEventChain({
                type: 'manual',
                pendingAchievements: [],
                pendingLevelAchievements: levelAchievements,
                pendingLevelUp: {
                  level: xpResult.newLevel!,
                  data: {
                    level: xpResult.levelData.level,
                    title: xpResult.levelData.title || `–£—Ä–æ–≤–µ–Ω—å ${xpResult.newLevel}`,
                    description: xpResult.levelData.description || `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${xpResult.newLevel} —É—Ä–æ–≤–Ω—è!`,
                    icon: xpResult.levelData.icon || '‚ú®',
                    currentXP: xpResult.levelData.currentXP,
                    xpGained: xpResult.levelData.xpGained,
                    xpRequired: 0,
                    isProjectTransition: xpResult.levelData.isProjectTransition || false
                  }
                },
                currentStep: 'levelUp',
                context: {}
              })
            }
          }
          
          // –£–¥–∞–ª—è–µ–º –ø—É–∑—ã—Ä—å —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
          await canvas.removeBubble(removal.bubbleId, removal.xpAmount, removal.isPhilosophyNegative)
        }
        pendingBubbleRemovals.value = []
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫ –¥–ª—è Event Chains
  const closeModalWithLogic = (key: keyof ModalStates) => {
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ event chains - –∏—Å–ø–æ–ª—å–∑—É–µ–º closeCurrentModal
    if (modalStore.currentEventChain || modalStore.currentModal) {
      modalStore.closeCurrentModal()
    } else {
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
      modalStore.closeModal(key)
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–µ–ø–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—É–∑—ã—Ä—è
  const startBubbleEventChain = async (bubble: BubbleNode) => {
    if (isProcessingBubbleModal.value) {
      return
    }

    isProcessingBubbleModal.value = true

    try {
      // –ü–æ—Å–µ—â–∞–µ–º –ø—É–∑—ã—Ä—å (–ù–ï –ø–æ–ª—É—á–∞–µ–º XP —Å—Ä–∞–∑—É)
      await visitBubble(bubble.id)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–∑—ã—Ä—è
      let xpGained = XP_CALCULATOR.getBubbleXP(bubble.skillLevel || 'novice')

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–∑—ã—Ä—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      addPendingBubbleRemoval({
        bubbleId: bubble.id,
        xpAmount: xpGained,
        isPhilosophyNegative: false
      })

      // –°–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–µ –∞—á–∏–≤–∫–∏ (bubble-explorer)
      const achievements: PendingAchievement[] = []
      const bubblesCount = sessionStore.visitedBubbles.length

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–∑—ã—Ä–µ–π
      const bubbleAchievementMap: Record<number, string> = {
        10: 'bubble-explorer-10',
        30: 'bubble-explorer-30',
        50: 'bubble-explorer-50'
      }

      const achievementId = bubbleAchievementMap[bubblesCount]
      if (achievementId) {
        const achievement = await unlockAchievement(achievementId)
        if (achievement) {
          achievements.push(createPendingAchievement(achievement))
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É –∑–∞ –ø–µ—Ä–≤—ã–π –∫—Ä–µ–ø–∫–∏–π –ø—É–∑—ã—Ä—å
      if (bubble.isTough && !sessionStore.hasUnlockedFirstToughBubbleAchievement) {
        const toughAchievement = await unlockAchievement('tough-bubble-popper')
        if (toughAchievement) {
          achievements.push(createPendingAchievement(toughAchievement))
        }
      }

      // –°–æ–±–∏—Ä–∞–µ–º –û–¢–î–ï–õ–¨–ù–û level –∞—á–∏–≤–∫–∏
      const levelAchievements: PendingAchievement[] = []

      // –ó–∞–ø—É—Å–∫–∞–µ–º Event Chain —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏
      // XP –±—É–¥–µ—Ç –ø—Ä–∏–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ –≤ processPendingBubbleRemovals
      modalStore.startEventChain({
        type: 'bubble',
        pendingAchievements: achievements,           // –¢–æ–ª—å–∫–æ bubble –∞—á–∏–≤–∫–∏
        pendingLevelAchievements: levelAchievements, // –û—Ç–¥–µ–ª—å–Ω–æ level –∞—á–∏–≤–∫–∏
        pendingLevelUp: null, // Level up –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è XP
        currentStep: 'bubble',
        context: {
          bubble,
          xpResult: {
            xpGained,
            livesLost: 0,
            agreementChange: 0,
            isPhilosophyNegative: false
          }
        }
      })

    } finally {
      isProcessingBubbleModal.value = false
    }
  }

  // Welcome Modal
  const openWelcome = () => {
    modalStore.enqueueModal({
      type: 'welcome',
      data: null,
      priority: MODAL_PRIORITIES.welcome
    })
  }

  const closeWelcome = () => closeModalWithLogic('welcome')

  // Bubble Modal
  const openBubbleModal = (bubble: BubbleNode) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Event Chains
    return startBubbleEventChain(bubble)
  }

  const continueBubbleModal = async () => {
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, Event Chain —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ü–µ–ø–æ—á–∫—É
    closeModalWithLogic('bubble')
  }

  // Level Up Modal
  const openLevelUpModal = (level: number, payload?: {
    level: number
    title?: string
    description?: string
    icon?: string
    currentXP: number
    xpGained: number
    xpRequired: number
    isProjectTransition?: boolean
  }) => {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
    console.log('üöÄ useModals openLevelUpModal called with:', { level, payload })
    
    // Level Up Modal —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Event Chain
    const levelData = levelStore.getLevelByNumber(level)

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const levelUpData: LevelUpData = {
      level: level,
      title: payload?.title || levelData?.title || `–£—Ä–æ–≤–µ–Ω—å ${level}`,
      description: payload?.description || levelData?.description || `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${level} —É—Ä–æ–≤–Ω—è!`,
      icon: payload?.icon || levelData?.icon || '‚ú®',
      currentXP: payload?.currentXP || sessionStore.session?.currentXP || 0,
      xpGained: payload?.xpGained || 0,
      xpRequired: payload?.xpRequired || 0,
      isProjectTransition: payload?.isProjectTransition || false
    }

    modalStore.startEventChain({
      type: 'manual',
      pendingAchievements: [],
      pendingLevelAchievements: [],
      pendingLevelUp: {
        level: level,
        data: levelUpData
      },
      currentStep: 'levelUp',
      context: {}
    })
  }

  const closeLevelUpModal = () => closeModalWithLogic('levelUp')

  // Philosophy Modal
  const openPhilosophyModal = (question: Question, bubbleId?: BubbleNode['id']) => {
    modalStore.enqueueModal({
      type: 'philosophy',
      data: { question, bubbleId: bubbleId || 0 },
      priority: MODAL_PRIORITIES.philosophy
    })
  }

  const handlePhilosophyResponse = async (response: { type: 'selected', optionId: string } | { type: 'custom', answer: string }) => {
    const question = modalStore.data.currentQuestion
    const bubbleId = modalStore.data.philosophyBubbleId

    if (!question) return

    const { useSession } = await import('@/composables/useSession')
    const { saveSelectedPhilosophyAnswer, saveCustomPhilosophyAnswer } = useSession()

    let xpAmount: number
    let isNegative = false

    if (response.type === 'selected') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const selectedOption = question.options.find(o => String(o.id) === response.optionId)
      if (!selectedOption) return

      isNegative = selectedOption.livesLost > 0

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      await saveSelectedPhilosophyAnswer(question.id, selectedOption.text, question.question)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç agreementLevel
      xpAmount = XP_CALCULATOR.getPhilosophyXP(selectedOption.agreementLevel)
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      await saveCustomPhilosophyAnswer(question.id, response.answer, question.question)

      xpAmount = XP_CALCULATOR.getPhilosophyBubbleXP({isCustom: true})
    }

    // –ü–æ–º–µ—á–∞–µ–º –ø—É–∑—ã—Ä—å –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π –°–†–ê–ó–£
    if (bubbleId) {
      await visitBubble(bubbleId)
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if (isNegative) {
      // –î–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: –æ—Ç–Ω–∏–º–∞–µ–º –∂–∏–∑–Ω—å
      const isGameOver = await losePhilosophyLife()
      

      
      if (isGameOver) {
        closeModalWithLogic('philosophy')
        openGameOverModal()
        return
      }
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–æ –∂–∏–∑–Ω—å –ø–æ—Ç–µ—Ä—è–Ω–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
    // XP –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –≤ processPendingBubbleRemovals

    if (bubbleId) {
      addPendingBubbleRemoval({
        bubbleId,
        xpAmount, // –ü–µ—Ä–µ–¥–∞–µ–º xpAmount –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ processPendingBubbleRemovals
        isPhilosophyNegative: isNegative
      })
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ü–û–°–õ–ï –ª–æ–ø–∞–Ω–∏—è –ø—É–∑—ã—Ä—è
    closeModalWithLogic('philosophy')

    // –í—ã–¥–∞–µ–º –∞—á–∏–≤–∫—É –∑–∞ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø—É–∑—ã—Ä—å (–ª—é–±–æ–π –æ—Ç–≤–µ—Ç)
    const achievement = await unlockAchievement('philosophy-master')
    if (achievement) {
      const achievementResult = await gainXP(achievement.xpReward)

      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—á–∏–≤–æ–∫
      const achievements: PendingAchievement[] = [createPendingAchievement(achievement)]

      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ level –∞—á–∏–≤–æ–∫
      const levelAchievements: PendingAchievement[] = []

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º level achievement
      await checkAndAddLevelAchievement(achievementResult, levelAchievements)

      // –ó–∞–ø—É—Å–∫–∞–µ–º Event Chain –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ø—É–∑—ã—Ä—è
      modalStore.startEventChain(createEventChainConfig(
        'bubble',
        achievements,
        levelAchievements,
        achievementResult,
        { xpResult: achievementResult, bubbleId: bubbleId || undefined }
      ))
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞—á–∏–≤–∫–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–∑—ã—Ä–∏ —Å—Ä–∞–∑—É
      await processPendingBubbleRemovals()
    }
  }

  // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const handlePhilosophyAnswer = async (optionId: string) => {
    await handlePhilosophyResponse({ type: 'selected', optionId })
  }

  const handlePhilosophyCustomAnswer = async (answer: string) => {
    await handlePhilosophyResponse({ type: 'custom', answer })
  }

  const closePhilosophyModal = () => closeModalWithLogic('philosophy')

  // Game Over Modal
  const openGameOverModal = () => {
    modalStore.enqueueModal({
      type: 'gameOver',
      data: {
        currentXP: sessionStore.session?.currentXP || 0,
        currentLevel: sessionStore.session?.currentLevel || 1,
        finalScore: 0
      },
      priority: MODAL_PRIORITIES.gameOver
    })
  }

  const closeGameOverModal = () => closeModalWithLogic('gameOver')

  const restartGame = async () => {
    modalStore.clearQueue() // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –º–æ–¥–∞–ª–æ–∫ –∏ event chains

    const { useApp } = await import('@/composables/useApp')
    const { resetGame } = useApp()

    closeModalWithLogic('gameOver')
    resetGame()
  }

  // Achievement Modal
  const openAchievementModal = (achievement: PendingAchievement) => {
    modalStore.enqueueModal({
      type: 'achievement',
      data: { achievement },
      priority: MODAL_PRIORITIES.achievement
    })
  }

  const closeAchievementModal = async () => {
    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –∞—á–∏–≤–∫—É (–∫—Ä–æ–º–µ level achievements, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (modalStore.data.achievement && 
        (!modalStore.currentEventChain || 
         modalStore.currentEventChain.currentStep !== 'levelAchievement')) {
      await gainXP(modalStore.data.achievement.xpReward)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
    if (modalStore.pendingAchievements.length > 0) {
      const next = modalStore.getNextPendingAchievement()
      if (next) {
        modalStore.setAchievement(next)
        return // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
      }
    }

    closeModalWithLogic('achievement')
    modalStore.setAchievement(null)
  }

  const closeBonusModal = async () => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º BonusModal
    modalStore.closeModal('bonus')
    modalStore.setCurrentBonus(null)

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –±–æ–Ω—É—Å–æ–≤
    const { useUiEventStore } = await import('@/stores/ui-event.store')
    const uiEventStore = useUiEventStore()
    uiEventStore.closeBonusPanel()

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Event Chain –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    const pausedChain = sessionStorage.getItem('pausedEventChain')
    if (pausedChain) {
      sessionStorage.removeItem('pausedEventChain')
      const chain = JSON.parse(pausedChain)

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º LevelUp —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
      if (chain.currentStep === 'levelUp') {
        chain.currentStep = 'levelAchievement'
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
      modalStore.startEventChain(chain)
      modalStore.processEventChain()
    }
  }

  // Memoir Modal
  const openMemoirModal = (memoir: NormalizedMemoir) => {
    modalStore.enqueueModal({
      type: 'memoir',
      data: { memoir },
      priority: MODAL_PRIORITIES.memoir
    })
  }

  const closeMemoirModal = async () => {
    closeModalWithLogic('memoir')
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –º–µ–º—É–∞—Ä–æ–≤
    const { useUiEventStore } = await import('@/stores/ui-event.store')
    const uiEventStore = useUiEventStore()
    uiEventStore.closeMemoirsPanel()
  }



  const handleSecretBubbleDestroyed = async () => {
    try {
      await processAchievementEventChain('secret-bubble-discoverer', 'manual')
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞—á–∏–≤–∫–∏ - –ø—É–∑—ã—Ä—å –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    }
  }

  return {
    // State
    modals,
    data,
    isAnyModalOpen,
    hasActiveModals,
    isProcessingBubbleModal,

    // Bridge
    addPendingBubbleRemoval,
    processPendingBubbleRemovals,
    // Welcome
    openWelcome,
    closeWelcome,

    // Bubble
    openBubbleModal,
    continueBubbleModal,

    // Level Up
    openLevelUpModal,
    closeLevelUpModal,

    // Philosophy
    openPhilosophyModal,
    handlePhilosophyAnswer,
    handlePhilosophyCustomAnswer,
    closePhilosophyModal,

    // Game Over
    openGameOverModal,
    closeGameOverModal,
    restartGame,

    // Achievement
    openAchievementModal,
    closeAchievementModal,

    // Bonus
    closeBonusModal,

    // Memoir
    openMemoirModal,
    closeMemoirModal,

    // Handlers
    handleSecretBubbleDestroyed
  }
}
