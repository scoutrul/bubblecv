import { ref } from 'vue'

interface ContactMessage {
    name: string
    email: string
    message: string
}

export function useContactForm() {
    const isSubmitting = ref(false)
    const error = ref<string | null>(null)
    const success = ref(false)

    const sendMessage = async (data: ContactMessage) => {
        if (!data.message) {
            error.value = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
            return false
        }

        isSubmitting.value = true
        error.value = null
        success.value = false

        try {
            const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN
            const TELEGRAM_CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID

            if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
                throw new Error('Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
            }

            const text = `
üì¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:</b>

üë§ <b>–ò–º—è:</b> ${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚úâÔ∏è <b>Email:</b> ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${data.message}
      `.trim()

            const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text,
                    parse_mode: 'HTML'
                })
            })

            const result = await response.json()

            if (result.ok) {
                success.value = true
                return true
            } else {
                error.value = result.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram'
                return false
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err)
            error.value = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            return false
        } finally {
            isSubmitting.value = false
        }
    }

    const resetState = () => {
        error.value = null
        success.value = false
    }

    return {
        isSubmitting,
        error,
        success,
        sendMessage,
        resetState
    }
} 