import { type Ref, ref, onMounted, onUnmounted } from 'vue'
import type { Question } from '@/types/data'
import type { Simulation } from 'd3-force'
import type { BubbleNode } from '@/types/canvas'
import { GAME_CONFIG } from '@/config/game-config'
import { useSessionStore } from '@/stores/session.store'
import { useModalStore } from '@/stores/modal.store'
import { useBubbleStore } from '@/stores/bubble.store'
import { useLevelStore } from '@/stores/levels.store'
import { gsap } from 'gsap'
import type { NormalizedBubble } from '@/types/normalized'

import { XP_CALCULATOR } from '@/config/game-config'

export function useCanvasInteraction(
  canvasRef: Ref<HTMLCanvasElement | null>,
  onBubblePopped?: (nodes: BubbleNode[]) => void
) {
  const modalStore = useModalStore()
  const gameStore = useLevelStore()
  const sessionStore = useSessionStore()
  const bubbleStore = useBubbleStore()
  
  const isDragging = ref(false)
  const hoveredBubble = ref<BubbleNode | null>(null)
  const parallaxOffset = ref({ x: 0, y: 0 })

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Level Up –º–æ–¥–∞–ª–∞
  const showLevelUpModal = (xpGained: number) => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è (—Ç–∞–∫—É—é –∂–µ –∫–∞–∫ –≤ LevelDisplay)
    const getLevelIcon = (level: number): string => {
      switch (level) {
        case 1: return 'üëã'
        case 2: return 'ü§î'
        case 3: return 'üìö'
        case 4: return 'ü§ù'
        case 5: return 'ü§úü§õ'
        default: return '‚≠ê'
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ contentLevels
    const levelData = gameStore.getLevelByNumber(sessionStore.currentLevel)
    const levelUpData = {
      level: sessionStore.currentLevel,
      title: levelData?.title || `–£—Ä–æ–≤–µ–Ω—å ${sessionStore.currentLevel}`,
      description: levelData?.description || '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!',
      icon: getLevelIcon(sessionStore.currentLevel),
      currentXP: sessionStore.currentXP,
      xpGained,
      unlockedFeatures: (levelData as any)?.unlockedFeatures || []
    }
    
    modalStore.openLevelUpModal(sessionStore.currentLevel, levelUpData)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
  const handleMouseMove = (
    event: MouseEvent,
    nodes: BubbleNode[],
    findBubbleUnderCursor: (mouseX: number, mouseY: number, nodes: BubbleNode[]) => BubbleNode | null,
    pushNeighbors: (centerBubble: BubbleNode, pushRadius: number, pushStrength: number, nodes: BubbleNode[]) => void
  ) => {
    if (!canvasRef.value) return

    const rect = canvasRef.value.getBoundingClientRect()
    const mouseX = event.clientX - rect.left
    const mouseY = event.clientY - rect.top

    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
    const centerX = rect.width / 2
    const centerY = rect.height / 2
    const strength = 0.008 // –°–∏–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ (–µ—â–µ —É–º–µ–Ω—å—à–µ–Ω–∞)
    const targetX = (mouseX - centerX) * strength * -1
    const targetY = (mouseY - centerY) * strength * -1

    // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
    gsap.to(parallaxOffset.value, {
      x: targetX,
      y: targetY,
      duration: 1.2, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–ª—è –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
      ease: 'power2.out' // –ò–∑–∏–Ω–≥ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    })

    // –ï—Å–ª–∏ –∏–¥–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–≤–µ—Ä
    if (isDragging.value) return

    const newHoveredBubble = findBubbleUnderCursor(mouseX, mouseY, nodes)

    if (newHoveredBubble !== hoveredBubble.value) {
      // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ–≤–µ—Ä–∞
      if (hoveredBubble.value) {
        hoveredBubble.value.targetRadius = hoveredBubble.value.baseRadius
        hoveredBubble.value.isHovered = false
      }

      hoveredBubble.value = newHoveredBubble

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–æ–≤–µ—Ä–∞
      if (hoveredBubble.value) {
        hoveredBubble.value.targetRadius = hoveredBubble.value.baseRadius * 1.2
        hoveredBubble.value.isHovered = true
        canvasRef.value!.style.cursor = 'pointer'
        
        // –û—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ö–æ–≤–µ—Ä–∞
        const pushRadius = hoveredBubble.value.baseRadius * 3 // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–¥–∏—É—Å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        const pushStrength = 4 // –£–º–µ–Ω—å—à–∏–ª–∏ —Å–∏–ª—É –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
        pushNeighbors(hoveredBubble.value, pushRadius, pushStrength, nodes)
        
  
      } else {
        canvasRef.value!.style.cursor = 'default'
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ –º—ã—à–∏
  const handleMouseLeave = () => {
    if (hoveredBubble.value) {
      hoveredBubble.value.targetRadius = hoveredBubble.value.baseRadius
      hoveredBubble.value.isHovered = false
      hoveredBubble.value = null
    }
    if (canvasRef.value) {
      canvasRef.value.style.cursor = 'default'
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤
  const handleClick = async (
    event: MouseEvent,
    nodes: BubbleNode[],
    width: number,
    height: number,
    findBubbleUnderCursor: (mouseX: number, mouseY: number, nodes: BubbleNode[]) => BubbleNode | null,
    explodeFromPoint: (clickX: number, clickY: number, explosionRadius: number, explosionStrength: number, nodes: BubbleNode[], width: number, height: number) => void,
    createXPFloatingText: (x: number, y: number, xpAmount: number, color?: string) => void,
    createLifeLossFloatingText: (x: number, y: number) => void,
    removeBubble: (bubbleId: NormalizedBubble['id'], nodes: BubbleNode[]) => BubbleNode[],
    getSimulation?: () => Simulation<BubbleNode, undefined> | null
  ) => {
    if (!canvasRef.value || isDragging.value) return
    isDragging.value = true

    try {
      const rect = canvasRef.value.getBoundingClientRect()
      const mouseX = event.clientX - rect.left
      const mouseY = event.clientY - rect.top

      const clickedBubble = findBubbleUnderCursor(mouseX, mouseY, nodes)

      if (clickedBubble && !clickedBubble.isVisited) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–ø–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π
        if (clickedBubble.isTough) {
          const result = bubbleStore.incrementToughBubbleClicks(clickedBubble.id)
          
          if (result.isReady) {
            // –ü—É–∑—ã—Ä—å –ø—Ä–æ–±–∏—Ç!
            // –ü–æ–º–µ—á–∞–µ–º –ø—É–∑—ã—Ä—å –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ—è–≤–∏–ª—Å—è —Å–Ω–æ–≤–∞.
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –≤ handleBubbleContinue.
            await sessionStore.visitBubble(clickedBubble.id)

            // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –ø–æ–∑–≤–æ–ª—è–µ–º –∫–æ–¥—É –Ω–∏–∂–µ
            // –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –ø—É–∑—ã—Ä—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π (–æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É).
          } else {
            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–ª–∏–∫–∏ –¥–∞—é—Ç XP
            createXPFloatingText(mouseX, mouseY, 1, '#22c55e')
            const leveledUp = await sessionStore.gainXP(1)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            if (leveledUp) {
              showLevelUpModal(1)
            }

            // --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–°–ö–û–ö–ê –ò –ù–ê–ë–£–•–ê–ù–ò–Ø ---
            const clickOffsetX = mouseX - clickedBubble.x
            const clickOffsetY = mouseY - clickedBubble.y
            const distanceToCenter = Math.sqrt(clickOffsetX * clickOffsetX + clickOffsetY * clickOffsetY)

            if (distanceToCenter > 0) {
              const dirX = clickOffsetX / distanceToCenter
              const dirY = clickOffsetY / distanceToCenter
              
              const strengthFactor = Math.min(distanceToCenter / clickedBubble.radius, 1)
              // –°–∏–ª–∞ –æ—Ç—Å–∫–æ–∫–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¢–ï–ö–£–©–ï–ì–û —Ä–∞–∑–º–µ—Ä–∞ –ø—É–∑—ã—Ä—è
              const maxStrength = clickedBubble.radius * 1.5 // –ï—â–µ –±–æ–ª—å—à–µ –æ—Ç—Å–∫–æ–∫
              const jumpStrength = maxStrength * strengthFactor

              clickedBubble.vx -= dirX * jumpStrength
              clickedBubble.vy -= dirY * jumpStrength
              clickedBubble.x -= dirX * jumpStrength * 0.5
              clickedBubble.y -= dirY * jumpStrength * 0.5

              const simulation = getSimulation ? getSimulation() : null
              if (simulation) {
                simulation.alpha(1).restart()
              }
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è "–Ω–∞–±—É—Ö–∞–Ω–∏—è" –ø—Ä–∏ –∫–ª–∏–∫–µ
            gsap.killTweensOf(clickedBubble, 'targetRadius')
            clickedBubble.targetRadius = (clickedBubble.targetRadius || clickedBubble.baseRadius) * 1.08
            gsap.to(clickedBubble, {
              targetRadius: clickedBubble.baseRadius,
              duration: 1.2,
              ease: 'elastic.out(1, 0.6)',
              delay: 0.1
            })
          
            return // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –∏ –Ω–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π
          }
        }
        
        // –ü—É–∑—ã—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ –Ω–µ–º—É –∫–ª–∏–∫–Ω—É–ª–∏
        clickedBubble.isVisited = true
        await sessionStore.visitBubble(clickedBubble.id)
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –ø—É–∑—ã—Ä—è
        if (clickedBubble.isHidden) {
          // –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
          const explosionRadius = clickedBubble.baseRadius * 8
          const explosionStrength = 25
          explodeFromPoint(clickedBubble.x, clickedBubble.y, explosionRadius, explosionStrength, nodes, width, height)
          
          // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É–∑—ã—Ä—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É)

          const secretXP = XP_CALCULATOR.getSecretBubbleXP()
          const leveledUp = await sessionStore.gainXP(secretXP)
          createXPFloatingText(clickedBubble.x, clickedBubble.y, secretXP, '#FFD700')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
          if (leveledUp) {
            showLevelUpModal(secretXP)
          }
          
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ XP)
          const achievement = await gameStore.unlockAchievement('secret-bubble-discoverer')
          if (achievement) {
            const achievementLeveledUp = await sessionStore.gainXP(achievement.xpReward)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            if (achievementLeveledUp) {
              showLevelUpModal(achievement.xpReward)
            }
            
            modalStore.queueOrShowAchievement({
              title: achievement.name,
              description: achievement.description,
              icon: achievement.icon,
              xpReward: achievement.xpReward
            })
          }
          
          // –£–¥–∞–ª—è–µ–º –ø—É–∑—ã—Ä—å —Å–æ —Å—Ü–µ–Ω—ã
          removeBubble(clickedBubble.id, nodes)
          return
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞ - –ø–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        const originalRadius = clickedBubble.targetRadius
        clickedBubble.targetRadius = originalRadius * 0.9
        
        setTimeout(() => {
          clickedBubble.targetRadius = originalRadius * 1.3
          setTimeout(() => {
            clickedBubble.targetRadius = originalRadius
          }, 150)
        }, 100)
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        if (clickedBubble.isQuestion) {
          // –î–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –º–æ–¥–∞–ª
          const question: Question = {
            id: `question-${clickedBubble.id}`,
            title: clickedBubble.name,   
            description: clickedBubble.description,
            question: clickedBubble.description,
            type: 'string',
            insight: 'string',
            options: [
              {
                id: 1,
                text: '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —ç—Ç–∏–º –ø–æ–¥—Ö–æ–¥–æ–º –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ.',
                response: 'string',
                agreementLevel: 100,
                livesLost: 1
              },
              {
                id: 1,
                text: '–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —ç—Ç–∏–º –ø–æ–¥—Ö–æ–¥–æ–º.',
                response: 'string',
                agreementLevel: 100,
                livesLost: 1
              },
            ],
          }
          modalStore.openPhilosophyModal(question, clickedBubble.id)
        } else {
          modalStore.openBubbleModal(clickedBubble)
        }
      } else if (!clickedBubble) {
        // –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É - —Å–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
        const explosionRadius = Math.min(width, height) * 0.3 // 30% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        const explosionStrength = 15 // –°–∏–ª—å–Ω—ã–π –≤–∑—Ä—ã–≤
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –æ—Ç —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
        explodeFromPoint(mouseX, mouseY, explosionRadius, explosionStrength, nodes, width, height)
      }
    } finally {
      isDragging.value = false
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
  const handleBubbleContinue = async (
    event: Event,
    nodes: BubbleNode[],
    createXPFloatingText: (x: number, y: number, xpAmount: number, color?: string) => void,
    createLifeLossFloatingText: (x: number, y: number) => void,
    explodeBubble: (bubble: BubbleNode) => void,
    removeBubble: (bubbleId: NormalizedBubble['id'], nodes: BubbleNode[]) => BubbleNode[]
  ) => {
    const customEvent = event as CustomEvent
    const { bubbleId, isPhilosophyNegative } = customEvent.detail
    
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—É–∑—ã—Ä—å
    const bubble = nodes.find(node => node.id === bubbleId)
    if (!bubble) {
      return
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    let leveledUp = false
    let xpGained = 0
    
    if (bubble.isTough) {
      // –î–ª—è –∫—Ä–µ–ø–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π XP —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –∑–∞ –∫–ª–∏–∫–∏.
      // –ó–¥–µ—Å—å –º—ã –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –≤–∑—Ä—ã–≤–∞–µ–º –µ–≥–æ.
      await sessionStore.unlockFirstToughBubbleAchievement()
      xpGained = 0 // XP –∑–∞ —Å–∞–º–æ –ø—Ä–æ–±–∏—Ç–∏–µ –Ω–µ –¥–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –∑–∞ –∫–ª–∏–∫–∏ –∏ –∞—á–∏–≤–∫—É.
      leveledUp = false
      
      explodeBubble(bubble)
      const remainingNodes = removeBubble(bubble.id, nodes)
      if (onBubblePopped) {
        onBubblePopped(remainingNodes)
      }
      return // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å
    } else if (bubble.isQuestion) {

      xpGained = XP_CALCULATOR.getPhilosophyBubbleXP()
      leveledUp = await sessionStore.gainXP(xpGained)
      createXPFloatingText(bubble.x, bubble.y, xpGained, '#22c55e')
      
      if (isPhilosophyNegative) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä—é –∂–∏–∑–Ω–∏ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        createLifeLossFloatingText(bubble.x, bubble.y)
      }
    } else {
      xpGained = XP_CALCULATOR.getBubbleXP(bubble.skillLevel || 'novice')
      leveledUp = await sessionStore.gainXP(xpGained)
      
      // –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è XP –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏ (–∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç)
      if (xpGained > 0) {
        createXPFloatingText(bubble.x, bubble.y, xpGained, '#22c55e')
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Level Up –º–æ–¥–∞–ª –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è
    if (leveledUp) {
      showLevelUpModal(xpGained)
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –ø—É–∑—ã—Ä—å –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π
    await sessionStore.visitBubble(bubble.id)
    bubble.isVisited = true
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–∑—ã—Ä–µ–π –ü–û–°–õ–ï –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
    const bubblesCount = sessionStore.visitedBubbles.length
    let achievement = null
    
    if (bubblesCount === 10) {
      achievement = await gameStore.unlockAchievement('bubble-explorer-10')
    } else if (bubblesCount === 30) {
      achievement = await gameStore.unlockAchievement('bubble-explorer-30')
    } else if (bubblesCount === 50) {
      achievement = await gameStore.unlockAchievement('bubble-explorer-50')
    }
    
    if (achievement) {
      const achievementLeveledUp = await sessionStore.gainXP(achievement.xpReward)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      if (achievementLeveledUp) {
        showLevelUpModal(achievement.xpReward)
      }
      
      modalStore.queueOrShowAchievement({
        title: achievement.name,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward
      })
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ –ø—É–∑—ã—Ä—è –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º
    explodeBubble(bubble)
    
    // –£–¥–∞–ª—è–µ–º –ø—É–∑—ã—Ä—å —Å—Ä–∞–∑—É - —Ä–µ–∑–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç
    setTimeout(() => {
      const remainingNodes = removeBubble(bubbleId, nodes)
      if (onBubblePopped) {
        onBubblePopped(remainingNodes)
      }
    }, 50) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∑–∏–∫–∏
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  const setupEventListeners = (
    nodes: () => BubbleNode[],
    width: () => number,
    height: () => number,
    findBubbleUnderCursor: (mouseX: number, mouseY: number, nodes: BubbleNode[]) => BubbleNode | null,
    pushNeighbors: (centerBubble: BubbleNode, pushRadius: number, pushStrength: number, nodes: BubbleNode[]) => void,
    explodeFromPoint: (clickX: number, clickY: number, explosionRadius: number, explosionStrength: number, nodes: BubbleNode[], width: number, height: number) => void,
    createXPFloatingText: (x: number, y: number, xpAmount: number, color?: string) => void,
    createLifeLossFloatingText: (x: number, y: number) => void,
    explodeBubble: (bubble: BubbleNode) => void,
    removeBubble: (bubbleId: NormalizedBubble['id'], nodes: BubbleNode[]) => BubbleNode[],
    getSimulation?: () => Simulation<BubbleNode, undefined> | null
  ) => {
    const mouseMoveHandler = (event: MouseEvent) => 
      handleMouseMove(event, nodes(), findBubbleUnderCursor, pushNeighbors)
    
    const clickHandler = (event: MouseEvent) => 
      handleClick(event, nodes(), width(), height(), findBubbleUnderCursor, explodeFromPoint, createXPFloatingText, createLifeLossFloatingText, removeBubble, getSimulation)
    
    const bubbleContinueHandler = (event: Event) =>
      handleBubbleContinue(event, nodes(), createXPFloatingText, createLifeLossFloatingText, explodeBubble, removeBubble)

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä—è
    window.addEventListener('bubble-continue', bubbleContinueHandler)

    return {
      mouseMoveHandler,
      clickHandler,
      bubbleContinueHandler,
      removeEventListeners: () => {
        window.removeEventListener('bubble-continue', bubbleContinueHandler)
      }
    }
  }

  onMounted(() => {
    // setupEventListeners will be called from the component with proper parameters
  })

  return {
    isDragging,
    hoveredBubble,
    handleMouseMove,
    handleClick,
    handleMouseLeave,
    setupEventListeners,
    parallaxOffset
  }
} 