import { defineStore } from 'pinia'
import { ref } from 'vue'
import type { Achievement, ContentLevel } from '@shared/types'
import contentLevelsData from '@shared/data/contentLevels.json'
import { GAME_CONFIG } from '@shared/config/game-config'

export const useGameStore = defineStore('game', () => {
  const achievements = ref<Achievement[]>([])
  const contentLevels = ref<ContentLevel[]>([])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ XP —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
  const loadContentLevels = () => {
    const levelsWithUpdatedXP = contentLevelsData.levels.map((level, index) => {
      // –ü–æ–ª—É—á–∞–µ–º XP —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ game-config
      const xpRequiredMap = {
        1: 0,  // –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å - —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
        2: GAME_CONFIG.levelRequirements[2],
        3: GAME_CONFIG.levelRequirements[3],
        4: GAME_CONFIG.levelRequirements[4],
        5: GAME_CONFIG.levelRequirements[5]
      }
      
      return {
        ...level,
        xpRequired: xpRequiredMap[level.level as keyof typeof xpRequiredMap] || level.xpRequired
      } as ContentLevel
    })
    
    contentLevels.value = levelsWithUpdatedXP

  }

  const getLevelByNumber = (level: number) => {
    return contentLevels.value.find(l => l.level === level)
  }

  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const initializeAchievements = () => {
    achievements.value = [
      {
        id: 'tough-bubble-popper',
        name: '–ö—Ä–µ–ø—ã—à',
        description: '–í—ã –ø—Ä–æ–±–∏–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫—Ä–µ–ø–∫–∏–π –ø—É–∑—ã—Ä—å! –ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
        icon: 'üí™',
        xpReward: GAME_CONFIG.achievementXP.intermediate,
        isUnlocked: false
      },
      {
        id: 'secret-bubble-discoverer',
        name: '–ò—Å–∫–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–æ–≤',
        description: '–í—ã –Ω–∞—à–ª–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å–∫—Ä—ã—Ç—ã–π –ø—É–∑—ã—Ä—å!',
        icon: 'üïµÔ∏è',
        xpReward: GAME_CONFIG.achievementXP.advanced,
        isUnlocked: false
      },
      {
        id: 'year-jumper',
        name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏',
        description: '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥, –Ω–µ –ª–æ–ø–Ω—É–≤ –≤—Å–µ –ø—É–∑—ã—Ä–∏!',
        icon: '‚è≠Ô∏è',
        xpReward: GAME_CONFIG.achievementXP.advanced,
        isUnlocked: false
      },
      {
        id: 'completionist',
        name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
        description: '–í—ã –ª–æ–ø–Ω—É–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–∑—ã—Ä–∏ –≤ –≥–æ–¥—É!',
        icon: 'üèÜ',
        xpReward: GAME_CONFIG.achievementXP.master,
        isUnlocked: false
      },
      {
        id: 'philosophy-master',
        name: '–§–∏–ª–æ—Å–æ—Ñ',
        description: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å! –ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ –≥–æ—Ç–æ–≤ —Ä–∞–∑–º—ã—à–ª—è—Ç—å.',
        icon: 'ü§î',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.basic
      },
      {
        id: 'on-the-edge',
        name: '–ù–∞ –∫—Ä–∞—é',
        description: '–£ –≤–∞—Å –æ—Å—Ç–∞–ª–∞—Å—å –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –∂–∏–∑–Ω—å! –ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º.',
        icon: 'üî•',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.basic
      },
      {
        id: 'first-level-master',
        name: '–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü',
        description: '–í—ã –ø—Ä–æ—à–ª–∏ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.',
        icon: 'üöÄ',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.basic
      },
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π
      {
        id: 'bubble-explorer-10',
        name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
        description: '–ò–∑—É—á–∏–ª–∏ 10 –ø—É–∑—ã—Ä–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π! –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ - –¥–≤–∏–≥–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.',
        icon: 'üîç',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.basic
      },
      {
        id: 'bubble-explorer-30',
        name: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
        description: '–ò–∑—É—á–∏–ª–∏ 30 –ø—É–∑—ã—Ä–µ–π! –®–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥–æ–∑–æ—Ä - –æ—Å–Ω–æ–≤–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞.',
        icon: 'üéØ',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.intermediate
      },
      {
        id: 'bubble-explorer-50',
        name: '–ú–∞—Å—Ç–µ—Ä –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        description: '–ò–∑—É—á–∏–ª–∏ 50 –ø—É–∑—ã—Ä–µ–π! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥—É—Ä—É –≤ –º–∏—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
        icon: 'üèÜ',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.advanced
      },
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
      {
        id: 'final-level-master',
        name: '–§–∏–Ω–∞–ª–∏—Å—Ç',
        description: '–î–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –í—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º.',
        icon: 'üéñÔ∏è',
        isUnlocked: false,
        xpReward: GAME_CONFIG.achievementXP.master
      }
    ]
  }

  const unlockAchievement = async (achievementId: string): Promise<Achievement | null> => {
    const achievement = achievements.value.find(a => a.id === achievementId)
    if (achievement && !achievement.isUnlocked) {
      achievement.isUnlocked = true
      achievement.unlockedAt = new Date().toISOString()
      console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', achievement.name)

      // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const { useSessionStore } = await import('@entities/user-session/model/session-store')
      const { useModalStore } = await import('@shared/stores/modal-store')
      const sessionStore = useSessionStore()
      const modalStore = useModalStore()

      await sessionStore.gainXP(achievement.xpReward)
      
      modalStore.queueOrShowAchievement({
        title: achievement.name,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward
      })

      return achievement
    }
    return null
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ store
  loadContentLevels()
  initializeAchievements()

  return {
    achievements,
    contentLevels,
    getLevelByNumber,
    loadContentLevels,
    unlockAchievement
  }
}) 