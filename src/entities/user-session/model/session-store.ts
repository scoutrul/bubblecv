import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { UserSession, ApiResponse } from '@shared/types'
import { GAME_CONFIG } from '@shared/config/game-config'

export const useSessionStore = defineStore('session', () => {
  // State
  const session = ref<UserSession | null>(null)
  const isLoading = ref(false)
  const error = ref<string | null>(null)

  // Generate session ID
  const generateSessionId = (): string => {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  // Getters
  const currentXP = computed(() => session.value?.currentXP || 0)
  const currentLevel = computed(() => session.value?.currentLevel || 1)
  const lives = computed(() => session.value?.lives || GAME_CONFIG.MAX_LIVES)
  const unlockedContent = computed(() => session.value?.unlockedContent || [])
  const visitedBubbles = computed(() => session.value?.visitedBubbles || [])
  const agreementScore = computed(() => session.value?.agreementScore || 0)
  const gameCompleted = computed(() => session.value?.gameCompleted || false)

  const xpProgress = computed(() => {
    const levels = Object.values(GAME_CONFIG.XP_LEVELS) // [25, 50, 75, 100, 125]
    const currentLevelIndex = currentLevel.value - 1 // 0-based index
    
    // XP –Ω—É–∂–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const currentLevelRequiredXP = levels[currentLevelIndex] || 25
    
    // XP –Ω—É–∂–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è)
    const prevLevelRequiredXP = currentLevelIndex > 0 ? levels[currentLevelIndex - 1] : 0
    
    // –°–∫–æ–ª—å–∫–æ XP –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    const xpRangeForLevel = currentLevelRequiredXP - prevLevelRequiredXP
    
    // –°–∫–æ–ª—å–∫–æ XP —É–∂–µ –Ω–∞–±—Ä–∞–Ω–æ —Å–≤–µ—Ä—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const xpAbovePrevLevel = Math.max(0, currentXP.value - prevLevelRequiredXP)
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const progress = Math.min((xpAbovePrevLevel / xpRangeForLevel) * 100, 100)
    
    console.log('üìä XP Progress:', { 
      currentLevel: currentLevel.value,
      currentXP: currentXP.value,
      currentLevelRequiredXP,
      prevLevelRequiredXP,
      xpRangeForLevel,
      xpAbovePrevLevel,
      progress: Math.round(progress)
    })
    
    return Math.max(0, Math.min(progress, 100))
  })

  const nextLevelXP = computed(() => {
    const levels = Object.values(GAME_CONFIG.XP_LEVELS)
    const nextLevelIndex = currentLevel.value // index for next level (0-based + 1)
    const nextXP = levels[nextLevelIndex] || levels[levels.length - 1]
    
    console.log('üéØ Next Level XP:', { 
      currentLevel: currentLevel.value, 
      nextLevelIndex, 
      nextXP,
      currentXP: currentXP.value
    })
    
    return nextXP
  })

  const canLevelUp = computed(() => {
    const levels = Object.values(GAME_CONFIG.XP_LEVELS)
    const maxLevel = levels.length
    
    // –ù–µ –º–æ–∂–µ–º –ø–æ–≤—ã—Å–∏—Ç—å—Å—è –µ—Å–ª–∏ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    if (currentLevel.value >= maxLevel) return false
    
    // XP –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const requiredXPForNextLevel = levels[currentLevel.value - 1] // —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
    const canLevel = currentXP.value >= requiredXPForNextLevel
    
    console.log('üîÑ Can Level Up Check:', {
      currentLevel: currentLevel.value,
      currentXP: currentXP.value,
      requiredXPForNextLevel,
      canLevel,
      maxLevel
    })
    
    return canLevel
  })

  const isAlive = computed(() => lives.value > 0)

  // Actions
  const loadSession = async (sessionId?: string): Promise<void> => {
    isLoading.value = true
    error.value = null

    try {
      const id = sessionId || generateSessionId()
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        const response = await fetch(`/api/session/${id}`)
        const data: ApiResponse<UserSession> = await response.json()

        if (data.success && data.data) {
          session.value = {
            ...data.data,
            startTime: new Date(data.data.startTime),
            lastActivity: new Date(data.data.lastActivity)
          } as UserSession
          console.log('–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞')
          return
        }
      } catch (serverError) {
        console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage')
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
      try {
        const localSession = localStorage.getItem('bubbleme_session')
        if (localSession) {
          const parsedSession = JSON.parse(localSession)
          session.value = {
            ...parsedSession,
            startTime: new Date(parsedSession.startTime),
            lastActivity: new Date(parsedSession.lastActivity)
          }
          console.log('–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage')
          return
        }
      } catch (localError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage')
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
      session.value = {
        id,
        currentXP: 0,
        currentLevel: 1,
        lives: GAME_CONFIG.MAX_LIVES,
        unlockedContent: [],
        visitedBubbles: [],
        agreementScore: 0,
        gameCompleted: false,
        startTime: new Date(),
        lastActivity: new Date()
      }
      console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è:', session.value)

    } catch (err) {
      error.value = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', err)
    } finally {
      isLoading.value = false
    }
  }

  const saveSession = async (): Promise<void> => {
    if (!session.value) return

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const response = await fetch(`/api/session/${session.value.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          currentXP: session.value.currentXP,
          currentLevel: session.value.currentLevel,
          lives: session.value.lives,
          unlockedContent: session.value.unlockedContent,
          visitedBubbles: session.value.visitedBubbles,
          agreementScore: session.value.agreementScore
        })
      })

      const data: ApiResponse = await response.json()

      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏')
      }

      console.log('–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')

    } catch (err) {
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ localStorage
      try {
        localStorage.setItem('bubbleme_session', JSON.stringify(session.value))
        console.log('–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ')
      } catch (localErr) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ:', localErr)
      }
    }
  }

  const gainXP = async (amount: number): Promise<boolean> => {
    if (!session.value) return false

    const oldLevel = session.value.currentLevel
    const oldXP = session.value.currentXP
    session.value.currentXP += amount
    
    console.log('‚ú® Gaining XP:', { 
      amount, 
      oldXP, 
      newXP: session.value.currentXP, 
      oldLevel, 
      canLevelUp: canLevelUp.value,
      nextLevelXP: nextLevelXP.value
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if (canLevelUp.value) {
      session.value.currentLevel += 1
      
      console.log('üéâ LEVEL UP!', { 
        oldLevel, 
        newLevel: session.value.currentLevel,
        currentXP: session.value.currentXP
      })
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      if (!session.value.unlockedContent.includes(session.value.currentLevel)) {
        session.value.unlockedContent.push(session.value.currentLevel)
      }
      
      await saveSession()
      return true // –ü—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    }
    
    await saveSession()
    return false
  }

  // –ü–æ–ª—É—á–∏—Ç—å XP –∑–∞ —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –ø—É–∑—ã—Ä—è
  const gainBubbleXP = async (expertiseLevel: string): Promise<boolean> => {
    const xpAmount = GAME_CONFIG.XP_PER_EXPERTISE_LEVEL[expertiseLevel as keyof typeof GAME_CONFIG.XP_PER_EXPERTISE_LEVEL] || 1
    console.log('ü´ß Bubble XP:', { expertiseLevel, xpAmount })
    return await gainXP(xpAmount)
  }

  // –ü–æ–ª—É—á–∏—Ç—å XP –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
  const gainPhilosophyXP = async (): Promise<boolean> => {
    return await gainXP(GAME_CONFIG.PHILOSOPHY_CORRECT_XP)
  }

  // –ü–æ—Ç–µ—Ä—è—Ç—å –∂–∏–∑–Ω—å –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
  const losePhilosophyLife = async (): Promise<boolean> => {
    await loseLives(GAME_CONFIG.PHILOSOPHY_WRONG_LIVES)
    return lives.value === 0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ Game Over
  }

  const loseLives = async (amount: number = 1): Promise<void> => {
    if (!session.value) return

    session.value.lives = Math.max(0, session.value.lives - amount)
    
    console.log('üíî Lost lives:', { amount, remainingLives: session.value.lives })
    
    if (session.value.lives === 0) {
      session.value.gameCompleted = true
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Game Over –º–æ–¥–∞–ª —á–µ—Ä–µ–∑ modal store
      const { useModalStore } = await import('../../../shared/stores/modal-store')
      const modalStore = useModalStore()
      
      modalStore.openGameOverModal({
        currentXP: session.value.currentXP,
        currentLevel: session.value.currentLevel
      })
      
      console.log('üíÄ GAME OVER! Opening modal...')
    }
    
    await saveSession()
  }

  const visitBubble = async (bubbleId: string): Promise<void> => {
    if (!session.value) return

    if (!session.value.visitedBubbles.includes(bubbleId)) {
      session.value.visitedBubbles.push(bubbleId)
      await saveSession()
    }
  }

  const updateAgreementScore = async (score: number): Promise<void> => {
    if (!session.value) return

    session.value.agreementScore += score
    await saveSession()
  }

  const resetSession = async (): Promise<void> => {
    if (!session.value) return

    session.value.currentXP = 0
    session.value.currentLevel = 1
    session.value.lives = GAME_CONFIG.MAX_LIVES
    session.value.unlockedContent = []
    session.value.visitedBubbles = []
    session.value.agreementScore = 0
    session.value.gameCompleted = false
    session.value.startTime = new Date()
    session.value.lastActivity = new Date()

    await saveSession()
  }

  const clearError = (): void => {
    error.value = null
  }

  return {
    // State
    session,
    isLoading,
    error,
    
    // Getters
    currentXP,
    currentLevel,
    lives,
    unlockedContent,
    visitedBubbles,
    agreementScore,
    gameCompleted,
    xpProgress,
    nextLevelXP,
    canLevelUp,
    isAlive,
    
    // Actions
    loadSession,
    saveSession,
    gainXP,
    gainBubbleXP,
    gainPhilosophyXP,
    losePhilosophyLife,
    loseLives,
    visitBubble,
    updateAgreementScore,
    resetSession,
    clearError
  }
}) 