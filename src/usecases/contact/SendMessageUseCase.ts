import type { SendMessageParams, SendMessageResult, ContactFormStore, ContactSessionStore } from './types'
import { ContactRepository } from './ContactRepository'

export class SendMessageUseCase {
  constructor(
    private contactRepository: ContactRepository,
    private contactFormStore: ContactFormStore,
    private sessionStore: ContactSessionStore
  ) {}

  async execute(params: SendMessageParams): Promise<SendMessageResult> {
    const { message } = params

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!message.message) {
      return { success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    this.contactFormStore.setSubmitting(true)
    this.contactFormStore.setError(null)
    this.contactFormStore.setSuccess(false)

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const text = this.formatMessageText(message)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.contactRepository.sendMessage(text)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.contactFormStore.setSuccess(true)
      this.contactFormStore.setSubmitting(false)
      
      return { success: true }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err)
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
      
      this.contactFormStore.setError(errorMessage)
      this.contactFormStore.setSubmitting(false)
      
      return { success: false, error: errorMessage }
    }
  }

  private formatMessageText(message: { name: string; contact: string; message: string }): string {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
    const allAnswers = this.sessionStore.session.value?.allPhilosophyAnswers || {}
    const hasAnswers = Object.keys(allAnswers).length > 0

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é —Å–æ –≤—Å–µ–º–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    let philosophyAnswersText = ''
    if (hasAnswers) {
      philosophyAnswersText = '\n\nü§î <b>–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n'
      Object.entries(allAnswers).forEach(([questionId, answerData], index) => {
        const icon = answerData.type === 'custom' ? 'üí≠' : '‚úÖ'
        const typeText = answerData.type === 'custom' ? '–°–≤–æ–π –æ—Ç–≤–µ—Ç' : '–í—ã–±—Ä–∞–ª'
        
        philosophyAnswersText += `\n<b>${index + 1}.</b> <i>${answerData.questionText}</i>\n${icon} <b>${typeText}:</b> "${answerData.answer}"\n`
      })
    }

    return `
üì¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:</b>

üë§ <b>–ò–º—è:</b> ${message.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${message.contact || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message.message}${philosophyAnswersText}
    `.trim()
  }
} 