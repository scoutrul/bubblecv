import type { 
  LoseLivesParams, 
  LoseLivesResult, 
  SessionSessionStore, 
  SessionAchievementStore, 
  SessionUiEventStore 
} from './types'

export class LoseLivesUseCase {
  constructor(
    private sessionStore: SessionSessionStore,
    private achievementStore: SessionAchievementStore,
    private uiEventStore: SessionUiEventStore
  ) {}

  async execute(params: LoseLivesParams): Promise<LoseLivesResult> {
    const { amount = 1 } = params

    if (!this.sessionStore.session) {
      console.log('‚ùå LoseLivesUseCase: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return { 
        success: false, 
        livesRemaining: 0, 
        gameCompleted: false, 
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      }
    }

    const currentLives = this.sessionStore.session.lives
    console.log(`üîç LoseLivesUseCase: –¢–µ–∫—É—â–∏–µ –∂–∏–∑–Ω–∏: ${currentLives}, –æ—Ç–Ω–∏–º–∞–µ–º: ${amount}`)

    // –ï—Å–ª–∏ —Ç–µ—Ä—è–µ–º –±–æ–ª—å—à–µ –∂–∏–∑–Ω–µ–π, —á–µ–º –µ—Å—Ç—å
    if (amount >= currentLives) {
      console.log('üíÄ LoseLivesUseCase: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –≤—Å–µ –∂–∏–∑–Ω–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã')
      this.sessionStore.setLives(0)
      this.sessionStore.setGameCompleted(true)
      this.uiEventStore.queueShake('lives')
      
      return {
        success: true,
        livesRemaining: 0,
        gameCompleted: true
      }
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –∂–∏–∑–Ω–∏
    const newLives = Math.max(0, currentLives - amount)
    console.log(`üíî LoseLivesUseCase: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∏–∑–Ω–∏: ${newLives}`)
    this.sessionStore.setLives(newLives)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    if (newLives === 0) {
      console.log('üíÄ LoseLivesUseCase: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –∂–∏–∑–Ω–∏ = 0')
      this.sessionStore.setGameCompleted(true)
    }

    this.uiEventStore.queueShake('lives')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–Ω–∞ –≥—Ä–∞–Ω–∏"
    if (newLives === 1) {
      console.log('‚ö†Ô∏è LoseLivesUseCase: –û—Å—Ç–∞–ª–∞—Å—å 1 –∂–∏–∑–Ω—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–Ω–∞ –∫—Ä–∞—é"')
      const achievement = await this.achievementStore.unlockAchievement('on-the-edge', false)
      if (achievement) {
        console.log('üèÜ LoseLivesUseCase: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–Ω–∞ –∫—Ä–∞—é":', achievement)
        console.log(`üèÜ LoseLivesUseCase: –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.xpReward} XP`)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ Event Chain —Å–∏—Å—Ç–µ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        const { createPendingAchievement } = await import('@/composables/useModals')
        
        // –°–æ–∑–¥–∞–µ–º Event Chain –¥–ª—è –∞—á–∏–≤–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(async () => {
          const { useModalStore } = await import('@/stores/modal.store')
          const store = useModalStore()
          
          store.startEventChain({
            type: 'manual',
            pendingAchievements: [createPendingAchievement(achievement)],
            pendingLevelAchievements: [],
            pendingLevelUp: null,
            currentStep: 'achievement',
            context: {}
          })
        }, 100) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–∞–ª–æ–∫
      } else {
        console.log('‚ùå LoseLivesUseCase: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–Ω–∞ –∫—Ä–∞—é" –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ')
      }
    }

    console.log(`‚úÖ LoseLivesUseCase: –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∂–∏–∑–Ω–∏. –û—Å—Ç–∞–ª–æ—Å—å: ${newLives}`)
    return {
      success: true,
      livesRemaining: newLives,
      gameCompleted: newLives === 0
    }
  }
} 