import { describe, it, expect, beforeEach } from 'vitest'
import { setActivePinia } from 'pinia'
import { useUiEventStore } from './ui-event.store'
import { createTestPinia } from '../test/helpers/pinia-helpers'

describe('üè™ UI Event Store', () => {
  let store: ReturnType<typeof useUiEventStore>

  beforeEach(() => {
    setActivePinia(createTestPinia())
    store = useUiEventStore()
  })

  describe('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
    it('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å shake –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ shakeQueue –ø—É—Å—Ç–∞ —á–µ—Ä–µ–∑ consumeShakeQueue
      const queue = store.consumeShakeQueue()
      expect(queue.size).toBe(0)
    })
  })

  describe('üìù queueShake', () => {
    it('–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å shake', () => {
      store.queueShake('xp')
      
      const queue = store.consumeShakeQueue()
      expect(queue.has('xp')).toBe(true)
      expect(queue.size).toBe(1)
    })

    it('–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å', () => {
      store.queueShake('xp')
      store.queueShake('lives')
      store.queueShake('level')
      
      const queue = store.consumeShakeQueue()
      expect(queue.has('xp')).toBe(true)
      expect(queue.has('lives')).toBe(true)
      expect(queue.has('level')).toBe(true)
      expect(queue.size).toBe(3)
    })

    it('–Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å (Set behavior)', () => {
      store.queueShake('xp')
      store.queueShake('xp')
      store.queueShake('xp')
      
      const queue = store.consumeShakeQueue()
      expect(queue.has('xp')).toBe(true)
      expect(queue.size).toBe(1) // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑-–∑–∞ Set
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏', () => {
      store.queueShake('')
      
      const queue = store.consumeShakeQueue()
      expect(queue.has('')).toBe(true)
      expect(queue.size).toBe(1)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', () => {
      const specialNames = ['xp-bar', 'lives_counter', 'level@component', 'comp#1']
      
      specialNames.forEach(name => {
        store.queueShake(name)
      })
      
      const queue = store.consumeShakeQueue()
      expect(queue.size).toBe(specialNames.length)
      specialNames.forEach(name => {
        expect(queue.has(name)).toBe(true)
      })
    })
  })

  describe('üçΩÔ∏è consumeShakeQueue', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π Set –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞', () => {
      const queue = store.consumeShakeQueue()
      
      expect(queue).toBeInstanceOf(Set)
      expect(queue.size).toBe(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—á–∏—â–∞—Ç—å –µ–µ', () => {
      store.queueShake('xp')
      store.queueShake('lives')
      
      const queue = store.consumeShakeQueue()
      
      expect(queue.size).toBe(2)
      expect(queue.has('xp')).toBe(true)
      expect(queue.has('lives')).toBe(true)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞
      const secondQueue = store.consumeShakeQueue()
      expect(secondQueue.size).toBe(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ–ø–∏—é Set, –Ω–µ –≤–ª–∏—è—é—â—É—é –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
      store.queueShake('xp')
      
      const queue = store.consumeShakeQueue()
      
      // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π Set
      queue.add('lives')
      queue.delete('xp')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      store.queueShake('level')
      const newQueue = store.consumeShakeQueue()
      
      expect(newQueue.has('level')).toBe(true)
      expect(newQueue.has('lives')).toBe(false) // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ
      expect(newQueue.size).toBe(1)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –ø–æ–¥—Ä—è–¥', () => {
      // –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª
      store.queueShake('xp')
      const firstQueue = store.consumeShakeQueue()
      expect(firstQueue.size).toBe(1)
      
      // –í—Ç–æ—Ä–æ–π —Ü–∏–∫–ª
      store.queueShake('lives')
      store.queueShake('level')
      const secondQueue = store.consumeShakeQueue()
      expect(secondQueue.size).toBe(2)
      
      // –¢—Ä–µ—Ç–∏–π —Ü–∏–∫–ª - –ø—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å
      const thirdQueue = store.consumeShakeQueue()
      expect(thirdQueue.size).toBe(0)
    })
  })

  describe('üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π lifecycle UI —Å–æ–±—ã—Ç–∏–π', () => {
      // 1. –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ
      expect(store.consumeShakeQueue().size).toBe(0)
      
      // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
      store.queueShake('xp')
      store.queueShake('lives')
      
      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é
      const firstBatch = store.consumeShakeQueue()
      expect(firstBatch.size).toBe(2)
      expect(firstBatch.has('xp')).toBe(true)
      expect(firstBatch.has('lives')).toBe(true)
      
      // 4. –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      expect(store.consumeShakeQueue().size).toBe(0)
      
      // 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
      store.queueShake('level')
      store.queueShake('achievement')
      
      // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–∞—Ä—Ç–∏—é
      const secondBatch = store.consumeShakeQueue()
      expect(secondBatch.size).toBe(2)
      expect(secondBatch.has('level')).toBe(true)
      expect(secondBatch.has('achievement')).toBe(true)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–≥—Ä–æ–≤–æ–≥–æ UI', () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ XP
      store.queueShake('xp')
      store.queueShake('progress-bar')
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º level up
      store.queueShake('level')
      store.queueShake('achievement-notification')
      
      // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      const uiEvents = store.consumeShakeQueue()
      
      const expectedEvents = ['xp', 'progress-bar', 'level', 'achievement-notification']
      expect(uiEvents.size).toBe(expectedEvents.length)
      
      expectedEvents.forEach(event => {
        expect(uiEvents.has(event)).toBe(true)
      })
      
      // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
      expect(store.consumeShakeQueue().size).toBe(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–∞—Å—Ç—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏', () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º rapid fire —Å–æ–±—ã—Ç–∏—è (–∫–∞–∫ –≤ –∏–≥—Ä–µ)
      const events = []
      for (let i = 0; i < 100; i++) {
        const eventName = `event-${i % 5}` // 5 —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        store.queueShake(eventName)
        events.push(eventName)
      }
      
      const processedQueue = store.consumeShakeQueue()
      
      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (Set —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã)
      expect(processedQueue.size).toBe(5)
      
      for (let i = 0; i < 5; i++) {
        expect(processedQueue.has(`event-${i}`)).toBe(true)
      }
    })
  })

  describe('üîß Edge Cases', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', () => {
      const longName = 'a'.repeat(1000)
      
      store.queueShake(longName)
      
      const queue = store.consumeShakeQueue()
      expect(queue.has(longName)).toBe(true)
      expect(queue.size).toBe(1)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Unicode —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö', () => {
      const unicodeNames = ['üéØ', 'üíé', '‚≠ê', 'üèÜ', 'üé™', 'üåü']
      
      unicodeNames.forEach(name => {
        store.queueShake(name)
      })
      
      const queue = store.consumeShakeQueue()
      expect(queue.size).toBe(unicodeNames.length)
      
      unicodeNames.forEach(name => {
        expect(queue.has(name)).toBe(true)
      })
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å null/undefined –∏–º–µ–Ω–∞ –∫–∞–∫ –µ—Å—Ç—å', () => {
      // TypeScript –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç —ç—Ç–æ, –Ω–æ –Ω–∞ —Å–ª—É—á–∞–π runtime
      store.queueShake(null as any)
      store.queueShake(undefined as any)
      
      const queue = store.consumeShakeQueue()
      expect(queue.size).toBe(2)
      expect((queue as any).has(null)).toBe(true)
      expect((queue as any).has(undefined)).toBe(true)
    })

    it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–ø–µ—Ä–∞—Ü–∏–π', () => {
      const startTime = performance.now()
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π
      for (let i = 0; i < 10000; i++) {
        store.queueShake(`event-${i}`)
      }
      
      // –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
      const queue = store.consumeShakeQueue()
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      expect(queue.size).toBe(10000)
      expect(executionTime).toBeLessThan(100) // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (< 100ms)
    })
  })

  describe('üß© Type Safety', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', () => {
      const testValues = [
        'normal-component',
        'UPPERCASE_COMPONENT',
        'camelCaseComponent',
        'kebab-case-component',
        'snake_case_component',
        'PascalCaseComponent',
        'component123',
        '123component',
        'comp-onent_with.everything'
      ]
      
      testValues.forEach(value => {
        expect(() => store.queueShake(value)).not.toThrow()
      })
      
      const queue = store.consumeShakeQueue()
      expect(queue.size).toBe(testValues.length)
      
      testValues.forEach(value => {
        expect(queue.has(value)).toBe(true)
      })
    })
  })
}) 