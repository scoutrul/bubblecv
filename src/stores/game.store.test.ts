import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { mockAchievements } from '../test/fixtures/achievements'

// –ú–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–í–ê–ñ–ù–û: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏)
vi.mock('@/shared/assets/achievements', () => ({
  allAchievements: mockAchievements
}))

vi.mock('@shared/config/game-config', () => ({
  GAME_CONFIG: {
    levelRequirements: {
      1: 0,
      2: 100,
      3: 250,
      4: 500,
      5: 1000,
      6: 2000
    }
  }
}))

import { setActivePinia } from 'pinia'
import { useGameStore } from './game.store'
import { createTestPinia } from '../test/helpers/pinia-helpers'
import { server, http, HttpResponse } from '../test/mocks/server'

// –ú–æ–∫–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã stores
const mockSessionStore = {
  gainXP: vi.fn().mockResolvedValue(undefined)
}

const mockModalStore = {
  queueOrShowAchievement: vi.fn()
}

const mockUiEventStore = {
  queueShake: vi.fn()
}

vi.mock('@/stores/session.store', () => ({
  useSessionStore: () => mockSessionStore
}))

vi.mock('@/stores/modal.store', () => ({
  useModalStore: () => mockModalStore
}))

vi.mock('@/stores/ui-event.store', () => ({
  useUiEventStore: () => mockUiEventStore
}))

describe('üéÆ Game Store', () => {
  let store: ReturnType<typeof useGameStore>

  beforeEach(() => {
    setActivePinia(createTestPinia())
    store = useGameStore()
    vi.clearAllMocks()
  })

  afterEach(() => {
    vi.restoreAllMocks()
    server.resetHandlers()
  })

  describe('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
    it('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
      expect(store.achievements.length).toBeGreaterThan(0)
      expect(store.currentLevel).toBe(1)
      expect(store.currentXP).toBe(0)
      expect(store.isLoading).toBe(true) // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É—Ä–æ–≤–Ω–∏
      expect(store.error).toBe(null)
      expect(store.unlockedAchievements).toEqual([])
    })

    it('–¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', () => {
      store.achievements.forEach(achievement => {
        expect(achievement.isUnlocked).toBe(false)
        expect(achievement.isShown).toBe(false)
        expect(achievement.unlockedAt).toBeUndefined()
      })
    })
  })

  describe('üìö –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (loadContentLevels)', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', async () => {
             const mockLevels = [
         { level: 1, title: '–ù–æ–≤–∏—á–æ–∫', xpRequired: 0, description: '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' },
         { level: 2, title: '–ò–∑—É—á–∞—é—â–∏–π', xpRequired: 100, description: '–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å' },
         { level: 3, title: '–ü—Ä–∞–∫—Ç–∏–∫', xpRequired: 250, description: '–¢—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å' }
       ]

      server.use(
        http.get('/api/content-levels', () => {
          return HttpResponse.json({ levels: mockLevels })
        })
      )

      await store.loadContentLevels()

      expect(store.isLoading).toBe(false)
      expect(store.error).toBe(null)
      expect(store.contentLevels.length).toBe(3)
      expect(store.levels.length).toBe(3)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ XP requirements –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      expect(store.contentLevels[0].xpRequired).toBe(0)
      expect(store.contentLevels[1].xpRequired).toBe(100)
      expect(store.contentLevels[2].xpRequired).toBe(250)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω–µ–π', async () => {
      server.use(
        http.get('/api/content-levels', () => {
          return HttpResponse.json(
            { error: 'Server error' },
            { status: 500 }
          )
        })
      )

      await store.loadContentLevels()

      expect(store.isLoading).toBe(false)
      expect(store.error).toBe('Failed to load content levels')
    })

    it('getLevelByNumber –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', async () => {
             const mockLevels = [
         { level: 1, title: '–ù–æ–≤–∏—á–æ–∫', xpRequired: 0, description: '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' },
         { level: 2, title: '–ò–∑—É—á–∞—é—â–∏–π', xpRequired: 100, description: '–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å' }
       ]

      server.use(
        http.get('/api/content-levels', () => {
          return HttpResponse.json({ levels: mockLevels })
        })
      )

      await store.loadContentLevels()

      const level1 = store.getLevelByNumber(1)
      const level2 = store.getLevelByNumber(2)
      const levelNotExist = store.getLevelByNumber(999)

             expect(level1?.title).toBe('–ù–æ–≤–∏—á–æ–∫')
       expect(level2?.title).toBe('–ò–∑—É—á–∞—é—â–∏–π')
      expect(levelNotExist).toBeUndefined()
    })
  })

  describe('üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', () => {
    it('unlockAchievement –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', async () => {
      const achievementId = store.achievements[0].id
      const achievement = store.achievements[0]

      expect(achievement.isUnlocked).toBe(false)

      const result = await store.unlockAchievement(achievementId)

      expect(result).toBeTruthy()
      expect(achievement.isUnlocked).toBe(true)
      expect(achievement.unlockedAt).toBeTruthy()
      expect(achievement.isShown).toBe(true)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ stores
      expect(mockUiEventStore.queueShake).toHaveBeenCalledWith('achievements')
      expect(mockSessionStore.gainXP).toHaveBeenCalledWith(achievement.xpReward)
      expect(mockModalStore.queueOrShowAchievement).toHaveBeenCalledWith({
        title: achievement.name,
        description: achievement.description,
        icon: achievement.icon,
        xpReward: achievement.xpReward
      })
    })

    it('unlockAchievement —Å showModal=false –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª', async () => {
      const achievementId = store.achievements[0].id
      const achievement = store.achievements[0]

      const result = await store.unlockAchievement(achievementId, false)

      expect(result).toBeTruthy()
      expect(achievement.isUnlocked).toBe(true)
      expect(achievement.isShown).toBe(false)
      expect(mockModalStore.queueOrShowAchievement).not.toHaveBeenCalled()
    })

    it('unlockAchievement –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', async () => {
      const achievementId = store.achievements[0].id
      const achievement = store.achievements[0]

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑
      await store.unlockAchievement(achievementId)
      vi.clearAllMocks()

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
      const result = await store.unlockAchievement(achievementId)

      expect(result).toBeNull()
      expect(mockSessionStore.gainXP).not.toHaveBeenCalled()
      expect(mockModalStore.queueOrShowAchievement).not.toHaveBeenCalled()
    })

    it('unlockAchievement –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', async () => {
      const result = await store.unlockAchievement('non-existent-achievement')
      expect(result).toBeNull()
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', async () => {
      const achievementId = store.achievements[0].id

      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∞
      const promise1 = store.unlockAchievement(achievementId)
      const promise2 = store.unlockAchievement(achievementId)

      const [result1, result2] = await Promise.all([promise1, promise2])

      // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
      const successCount = [result1, result2].filter(r => r !== null).length
      expect(successCount).toBe(1)
    })
  })

  describe('üíé Bubble Achievements', () => {
    it('checkAndUnlockBubbleAchievements –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—É–∑—ã—Ä–µ–π', async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
      await store.checkAndUnlockBubbleAchievements(5)
      let achievement10 = store.achievements.find(a => a.id === 'bubble-explorer-10')
      expect(achievement10!.isUnlocked).toBe(false)

      await store.checkAndUnlockBubbleAchievements(10)
      achievement10 = store.achievements.find(a => a.id === 'bubble-explorer-10')
      expect(achievement10!.isUnlocked).toBe(true)

      await store.checkAndUnlockBubbleAchievements(30)
      let achievement30 = store.achievements.find(a => a.id === 'bubble-explorer-30')
      expect(achievement10!.isUnlocked).toBe(true)
      expect(achievement30!.isUnlocked).toBe(true)
    })

    it('checkAndUnlockBubbleAchievements –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏', async () => {
      await store.checkAndUnlockBubbleAchievements(100)
      
      const achievement10 = store.achievements.find(a => a.id === 'bubble-explorer-10')
      const achievement30 = store.achievements.find(a => a.id === 'bubble-explorer-30')
      const achievement50 = store.achievements.find(a => a.id === 'bubble-explorer-50')

      expect(achievement10!.isUnlocked).toBe(true)
      expect(achievement30!.isUnlocked).toBe(true)
      expect(achievement50!.isUnlocked).toBe(true)
    })
  })

  describe('üîÑ –°–±—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', () => {
    it('resetAchievements –¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', async () => {
      // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const achievement1 = store.achievements[0]
      const achievement2 = store.achievements[1]
      await store.unlockAchievement(achievement1.id)
      await store.unlockAchievement(achievement2.id, false) // –æ–¥–Ω–æ —Å –º–æ–¥–∞–ª–æ–º, –¥—Ä—É–≥–æ–µ –±–µ–∑

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      expect(store.achievements.find(a => a.id === achievement1.id)!.isUnlocked).toBe(true)
      expect(store.achievements.find(a => a.id === achievement1.id)!.isShown).toBe(true)
      expect(store.achievements.find(a => a.id === achievement1.id)!.unlockedAt).toBeDefined()
      
      expect(store.achievements.find(a => a.id === achievement2.id)!.isUnlocked).toBe(true)
      expect(store.achievements.find(a => a.id === achievement2.id)!.isShown).toBe(false)
      
      expect(store.unlockedAchievements.length).toBe(2)

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å
      store.resetAchievements()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–±—Ä–æ—à–µ–Ω–æ
      store.achievements.forEach(a => {
        expect(a.isUnlocked).toBe(false)
        expect(a.isShown).toBe(false)
        expect(a.unlockedAt).toBeUndefined()
      })
      expect(store.unlockedAchievements.length).toBe(0)
    })
  })

  describe('üìä Computed —Å–≤–æ–π—Å—Ç–≤–∞', () => {
    it('unlockedAchievements –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', async () => {
      expect(store.unlockedAchievements.length).toBe(0)

      await store.unlockAchievement(store.achievements[0].id)
      expect(store.unlockedAchievements.length).toBe(1)
      expect(store.unlockedAchievements[0].id).toBe(store.achievements[0].id)

      await store.unlockAchievement(store.achievements[1].id)
      expect(store.unlockedAchievements.length).toBe(2)

      // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
      await store.unlockAchievement(store.achievements[0].id)
      expect(store.unlockedAchievements.length).toBe(2) // –ù–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è
    })

    it('unlockedAchievements –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ reset', async () => {
      await store.unlockAchievement(store.achievements[0].id)
      await store.unlockAchievement(store.achievements[1].id)
      
      expect(store.unlockedAchievements.length).toBe(2)

      store.resetAchievements()
      
      expect(store.unlockedAchievements.length).toBe(0)
    })
  })

  describe('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è store', () => {
    it('–¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏', () => {
      // Store —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ beforeEach
      expect(store.achievements.length).toEqual(mockAchievements.length)
      
      store.achievements.forEach((achievement, index) => {
        expect(achievement.id).toBe(mockAchievements[index].id)
        expect(achievement.name).toBe(mockAchievements[index].name)
        expect(achievement.isUnlocked).toBe(false)
        expect(achievement.isShown).toBe(false)
      })
    })

    it('–¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏', () => {
      // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ store –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      expect(store.isLoading).toBe(true)
    })
  })

  describe('üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–ª–Ω—ã–º lifecycle', async () => {
      // 1. –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      expect(store.unlockedAchievements.length).toBe(0)
      expect(store.achievements.every(a => !a.isUnlocked)).toBe(true)

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ store –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é)
      expect(store.isLoading).toBeDefined() // Store —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      // 3. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      await store.unlockAchievement(store.achievements[0].id)
      expect(store.unlockedAchievements.length).toBe(1)

      // 4. Bubble achievements (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ—É–Ω–∫—Ü–∏–∏)
      expect(() => store.checkAndUnlockBubbleAchievements(10)).not.toThrow()
      
      // 5. Reset
      store.resetAchievements()
      expect(store.unlockedAchievements.length).toBe(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è', async () => {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
      server.use(
        http.get('/api/content-levels', () => {
          return HttpResponse.json(
            { error: 'Server error' },
            { status: 500 }
          )
        })
      )

      await store.loadContentLevels()
      expect(store.error).toBeTruthy()

             // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
       server.use(
         http.get('/api/content-levels', () => {
           return HttpResponse.json({ 
             levels: [{ level: 1, title: 'Test', xpRequired: 0, description: 'Test' }] 
           })
         })
       )

      await store.loadContentLevels()
      expect(store.error).toBe(null)
      expect(store.contentLevels.length).toBe(1)
    })
  })

  describe('üéØ Edge Cases', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —É—Ä–æ–≤–Ω–µ–π', async () => {
      // –ò–∑–æ–ª–∏—Ä—É–µ–º —ç—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –º–æ–∫–æ–≤
      server.resetHandlers()
      server.use(
        http.get('/api/content-levels', () => {
          return HttpResponse.json({ levels: [] })
        })
      )

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä store –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–∞
      const localPinia = createTestPinia()
      setActivePinia(localPinia)
      const newStore = useGameStore()
      
      // –î–∞–µ–º –ø—Ä–æ–º–∏—Å—É –≤ loadContentLevels –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
      // –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± - –µ—Å–ª–∏ –±—ã store –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—Ä–æ–º–∏—Å, –Ω–æ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º-–∞—É—Ç
      await new Promise(resolve => setTimeout(resolve, 50))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —É—Ä–æ–≤–Ω–∏ –ø—É—Å—Ç—ã–µ
      expect(newStore.isLoading).toBe(false)
      expect(newStore.contentLevels).toEqual([])
      expect(newStore.levels).toEqual([])
      expect(newStore.error).toBe(null)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏', async () => {
      // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è
      const originalAchievement = store.achievements[0]
      const modifiedAchievement = { ...originalAchievement, unlockedAt: undefined }
      store.achievements[0] = modifiedAchievement

      const result = await store.unlockAchievement(originalAchievement.id)
      
      expect(result).toBeTruthy()
      expect(modifiedAchievement.isUnlocked).toBe(true)
      expect(modifiedAchievement.unlockedAt).toBeTruthy()
    })
  })
}) 