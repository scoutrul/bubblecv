import {defineStore} from 'pinia'
import {computed, nextTick, reactive, ref} from 'vue'
import type {EventChain, LevelUpData, ModalData, ModalStates, PendingAchievement, QueuedModal} from '@/types/modals'
import {getEventChainCompletedHandler} from '@/composables/useModals'

export const useModalStore = defineStore('modalStore', () => {
  // State - —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
  const modals = reactive<ModalStates>({
    welcome: false,
    bubble: false,
    levelUp: false,
    philosophy: false,
    gameOver: false,
    achievement: false,
    bonus: false
  })

  const data = reactive<ModalData>({
    currentBubble: null,
    currentQuestion: null,
    philosophyBubbleId: null,
    achievement: null,
    gameOverStats: null,
    levelUpData: {
      level: 1,
      title: '',
      description: '',
      icon: 'üëã',
      currentXP: 0,
      xpGained: 0,
      xpRequired: 0
    },
    currentBonus: null
  })

  const pendingAchievements = ref<PendingAchievement[]>([])

  // –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const modalQueue = ref<QueuedModal[]>([])
  const currentModal = ref<QueuedModal | null>(null)

  // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Event Chains
  const currentEventChain = ref<EventChain | null>(null)

  // –ü—Ä–æ—Å—Ç—ã–µ computed
  const isAnyModalOpen = computed(() =>
    Object.values(modals).some(v => v)
  )

  const hasActiveModals = computed(() =>
    modals.welcome || modals.bubble || modals.levelUp || modals.philosophy || modals.gameOver
  )

  // Event Chain –º–µ—Ç–æ–¥—ã
  const startEventChain = (chain: Omit<EventChain, 'id'>) => {
    currentEventChain.value = {
      ...chain,
      id: `chain_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }
    processEventChain()
  }

  const processEventChain = () => {
    if (!currentEventChain.value) return

    const chain = currentEventChain.value

    switch (chain.currentStep) {
      case 'bubble':
        if (chain.context.bubble) {
          showModal({
            id: `bubble_${chain.id}`,
            type: 'bubble',
            data: chain.context.bubble,
            priority: 50
          })
        } else {
          // –ù–µ—Ç bubble, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
          continueEventChain()
        }
        break

      case 'levelUp':
        if (chain.pendingLevelUp) {
          showModal({
            id: `levelUp_${chain.id}`,
            type: 'levelUp',
            data: chain.pendingLevelUp.data,
            priority: 80
          })
        } else {
          // –ù–µ—Ç level up, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
          continueEventChain()
        }
        break

      case 'achievement':
        if (chain.pendingAchievements.length > 0) {
          const achievement = chain.pendingAchievements.shift()!
          showModal({
            id: `achievement_${chain.id}`,
            type: 'achievement',
            data: achievement,
            priority: 70
          })
        } else {
          // –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –∞—á–∏–≤–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
          continueEventChain()
        }
        break

      case 'levelAchievement':
        if (chain.pendingLevelAchievements.length > 0) {
          const achievement = chain.pendingLevelAchievements.shift()!
          showModal({
            id: `levelAchievement_${chain.id}`,
            type: 'achievement',
            data: achievement,
            priority: 70
          })
        } else {
          // –ù–µ—Ç level –∞—á–∏–≤–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
          continueEventChain()
        }
        break

      case 'complete':
        completeEventChain()
        break
    }
  }

  const continueEventChain = () => {
    if (!currentEventChain.value) return

    const chain = currentEventChain.value

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    switch (chain.currentStep) {
      case 'bubble':
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π: bubble ‚Üí achievement (–µ—Å–ª–∏ –µ—Å—Ç—å)
        chain.currentStep = 'achievement'
        break
      case 'achievement':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –æ–±—ã—á–Ω—ã–µ –∞—á–∏–≤–∫–∏
        if (chain.pendingAchievements.length > 0) {
          // –û—Å—Ç–∞–µ–º—Å—è –≤ achievement –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞—á–∏–≤–∫–∏
          processEventChain()
          return
        }
        // –ü–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –∞—á–∏–≤–æ–∫ ‚Üí levelUp
        chain.currentStep = 'levelUp'
        break
      case 'levelUp':
        // –ü–æ—Å–ª–µ level up ‚Üí level achievements
        chain.currentStep = 'levelAchievement'
        break
      case 'levelAchievement':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ level –∞—á–∏–≤–∫–∏
        if (chain.pendingLevelAchievements.length > 0) {
          // –û—Å—Ç–∞–µ–º—Å—è –≤ levelAchievement –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞—á–∏–≤–∫–∏
          processEventChain()
          return
        }
        // –ó–∞–≤–µ—Ä—à–∞–µ–º
        chain.currentStep = 'complete'
        break
      default:
        chain.currentStep = 'complete'
    }

    processEventChain()
  }

  const completeEventChain = () => {
    currentEventChain.value = null

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Event Chain
    nextTick(() => {
      const handler = getEventChainCompletedHandler()
      if (handler) {
        handler()
      }
    })
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const enqueueModal = (modal: Omit<QueuedModal, 'id'>) => {
    const modalWithId: QueuedModal = {
      ...modal,
      id: `${modal.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –º–æ–¥–∞–ª–∫–∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    const existingIndex = modalQueue.value.findIndex(m => m.type === modal.type)
    if (existingIndex !== -1) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–∞–ª–∫—É –Ω–æ–≤–æ–π (–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ)
      modalQueue.value[existingIndex] = modalWithId
    } else {
      modalQueue.value.push(modalWithId)
    }

    processQueue()
  }

  const processQueue = () => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –∏–ª–∏ event chain, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    if (currentModal.value || currentEventChain.value) return

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º)
    modalQueue.value.sort((a, b) => b.priority - a.priority)

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–∞–ª–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const nextModal = modalQueue.value.shift()
    if (nextModal) {
      showModal(nextModal)
    }
  }

  const showModal = (modal: QueuedModal) => {
    currentModal.value = modal

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏
    switch (modal.type) {
      case 'bubble':
        data.currentBubble = modal.data
        break
      case 'achievement':
        data.achievement = modal.data
        break
      case 'levelUp':
        data.levelUpData = modal.data
        break
      case 'philosophy':
        data.currentQuestion = modal.data.question
        data.philosophyBubbleId = modal.data.bubbleId
        break
      case 'gameOver':
        data.gameOverStats = modal.data
        break
      case 'bonus':
        data.currentBonus = modal.data
        break
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    modals[modal.type] = true
  }

  const closeCurrentModal = () => {
    if (!currentModal.value) return

    const modalType = currentModal.value.type
    modals[modalType] = false
    currentModal.value = null

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è event chain, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—ë
    if (currentEventChain.value) {
      nextTick(() => {
        continueEventChain()
      })
    } else {
      // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–∞–ª–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      nextTick(() => {
        processQueue()
      })
    }
  }

  const clearQueue = () => {
    modalQueue.value = []
    if (currentModal.value) {
      modals[currentModal.value.type] = false
      currentModal.value = null
    }
    currentEventChain.value = null
  }

  // –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–±–µ–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
  const openModal = (key: keyof ModalStates) => {
    modals[key] = true
  }

  const closeModal = (key: keyof ModalStates) => {
    modals[key] = false
  }

  const setCurrentBubble = (bubble: ModalData['currentBubble']) => {
    data.currentBubble = bubble
  }

  const setCurrentQuestion = (question: ModalData['currentQuestion']) => {
    data.currentQuestion = question
  }

  const setPhilosophyBubbleId = (id: ModalData['philosophyBubbleId']) => {
    data.philosophyBubbleId = id
  }

  const setAchievement = (achievement: ModalData['achievement']) => {
    data.achievement = achievement
  }

  const setGameOverStats = (stats: ModalData['gameOverStats']) => {
    data.gameOverStats = stats
  }

  const setLevelUpData = (levelData: LevelUpData) => {
    data.levelUpData = levelData
  }

  const setCurrentBonus = (bonus: ModalData['currentBonus']) => {
    data.currentBonus = bonus
  }

  // Achievement queue (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const addPendingAchievement = (achievement: PendingAchievement) => {
    pendingAchievements.value.push(achievement)
  }

  const getNextPendingAchievement = (): PendingAchievement | undefined => {
    return pendingAchievements.value.shift()
  }

  return {
    // State
    modals,
    data,
    pendingAchievements,

    // Queue system (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
    modalQueue,
    currentModal,
    enqueueModal,
    processQueue,
    closeCurrentModal,
    clearQueue,

    // Event Chain system (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    currentEventChain,
    startEventChain,
    processEventChain,
    continueEventChain,
    completeEventChain,

    // Computed
    isAnyModalOpen,
    hasActiveModals,

    // Modal control
    openModal,
    closeModal,

    // Data setters
    setCurrentBubble,
    setCurrentQuestion,
    setPhilosophyBubbleId,
    setAchievement,
    setGameOverStats,
    setLevelUpData,
    setCurrentBonus,

    // Achievement queue
    addPendingAchievement,
    getNextPendingAchievement
  }
})
