import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { createPinia, setActivePinia } from 'pinia'
import { useSessionStore } from '@/stores/session.store'
import { GAME_CONFIG } from '@shared/config/game-config'

const mockGameStore = {
  unlockAchievement: vi.fn().mockResolvedValue(null),
  checkAndUnlockBubbleAchievements: vi.fn()
}

const mockModalStore = {
  openGameOverModal: vi.fn(),
  openWelcome: vi.fn(),
  queueOrShowAchievement: vi.fn()
}

const mockUiEventStore = {
  queueShake: vi.fn()
}

vi.mock('@/stores/game.store', () => ({
  useGameStore: () => mockGameStore
}))

vi.mock('@/stores/modal.store', () => ({
  useModalStore: () => mockModalStore
}))

vi.mock('@/stores/ui-event.store', () => ({
  useUiEventStore: () => mockUiEventStore
}))

vi.mock('@shared/config/game-config', () => ({
  GAME_CONFIG: {
    maxLives: 3,
    initialLives: 3,
    levelRequirements: {
      1: 0,
      2: 100,
      3: 250,
      4: 500,
      5: 1000
    },
    xpPerExpertiseLevel: {
      novice: 5,
      intermediate: 10,
      confident: 15,
      expert: 20,
      master: 25
    },
    philosophyCorrectXp: 50,
    philosophyWrongLives: 1
  }
}))

import { createTestPinia } from '../test/helpers/pinia-helpers'

describe('üè™ Session Store', () => {
  let store: ReturnType<typeof useSessionStore>

  // Mock window.dispatchEvent
  const originalDispatchEvent = window.dispatchEvent

  beforeEach(() => {
    setActivePinia(createTestPinia())
    store = useSessionStore()
    
    // Mock window.dispatchEvent
    window.dispatchEvent = vi.fn()
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–∫–æ–≤
    vi.clearAllMocks()
  })

  afterEach(() => {
    vi.restoreAllMocks()
    window.dispatchEvent = originalDispatchEvent
  })

  describe('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
    it('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
      expect(store.session).toBe(null)
      expect(store.isLoading).toBe(false)
      expect(store.error).toBe(null)
      expect(store.currentXP).toBe(0)
      expect(store.currentLevel).toBe(1)
      expect(store.lives).toBe(3)
      expect(store.unlockedContent).toEqual([])
      expect(store.visitedBubbles).toEqual([])
      expect(store.agreementScore).toBe(0)
      expect(store.gameCompleted).toBe(false)
    })

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å computed —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ —Å–µ—Å—Å–∏–∏', () => {
      expect(store.xpProgress).toBe(0)
      expect(store.nextLevelXP).toBe(0)
      expect(store.canLevelUp).toBe(false)
      expect(store.isAlive).toBe(true) // –ó–∞ —Å—á–µ—Ç GAME_CONFIG.maxLives
    })
  })

  describe('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ loadSession', async () => {
      await store.loadSession()
      
      expect(store.session).not.toBe(null)
      expect(store.session?.currentXP).toBe(0)
      expect(store.session?.currentLevel).toBe(1)
      expect(store.session?.lives).toBe(3)
      expect(store.session?.gameCompleted).toBe(false)
      expect(store.session?.hasDestroyedToughBubble).toBe(false)
      expect(store.session?.startTime).toBeInstanceOf(Date)
      expect(store.session?.lastActivity).toBeInstanceOf(Date)
    })

    it('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Å–µ—Å—Å–∏–π', async () => {
      await store.loadSession()
      const firstSessionId = store.session?.id
      
      await store.loadSession()
      const secondSessionId = store.session?.id
      
      expect(firstSessionId).not.toBe(secondSessionId)
      expect(firstSessionId).toMatch(/^session_\d+_[a-z0-9]+$/)
      expect(secondSessionId).toMatch(/^session_\d+_[a-z0-9]+$/)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
      const loadPromise = store.loadSession()
      
      expect(store.isLoading).toBe(true)
      
      await loadPromise
      
      expect(store.isLoading).toBe(false)
    })
  })

  describe('üéØ XP —Å–∏—Å—Ç–µ–º–∞', () => {
    beforeEach(async () => {
      await store.loadSession()
    })

    it('–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏—Å–ª—è—Ç—å XP –±–µ–∑ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è', async () => {
      const leveledUp = await store.gainXP(50)
      
      expect(store.currentXP).toBe(50)
      expect(store.currentLevel).toBe(1)
      expect(leveledUp).toBe(false)
      expect(mockUiEventStore.queueShake).toHaveBeenCalledWith('xp')
    })

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º XP', async () => {
      const leveledUp = await store.gainXP(100)
      
      expect(store.currentXP).toBe(100)
      expect(store.currentLevel).toBe(2)
      expect(leveledUp).toBe(true)
      expect(mockUiEventStore.queueShake).toHaveBeenCalledWith('xp')
      expect(mockUiEventStore.queueShake).toHaveBeenCalledWith('level')
      expect(mockGameStore.unlockAchievement).toHaveBeenCalledWith('first-level-master')
    })

    it('–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏—Å–ª—è—Ç—å XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è', async () => {
      const mockAchievement = { name: 'Test', description: 'Test', icon: 'üèÜ', xpReward: 25 }
      mockGameStore.unlockAchievement.mockResolvedValueOnce(mockAchievement)
      
      await store.gainXP(100)
      
      expect(store.currentXP).toBe(125) // 100 + 25 –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    })

    it('–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è', async () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å 4 –∏ XP –ø–æ—á—Ç–∏ –¥–æ —É—Ä–æ–≤–Ω—è 5
      store.session!.currentLevel = 4
      store.session!.currentXP = 950
      
      await store.gainXP(50)
      
      expect(store.currentLevel).toBe(5)
      expect(mockGameStore.unlockAchievement).toHaveBeenCalledWith('final-level-master')
    })

    it('gainBubbleXP –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏—Å–ª—è—Ç—å XP —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ä–æ–≤–Ω—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã', async () => {
      const leveledUp = await store.gainBubbleXP('expert')
      
      expect(store.currentXP).toBe(20) // expert = 20 XP
      expect(leveledUp).toBe(false)
    })

    it('gainBubbleXP –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è', async () => {
      await store.gainBubbleXP('unknown-level')
      
      expect(store.currentXP).toBe(1) // default = 1 XP
    })

    it('gainPhilosophyXP –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏—Å–ª—è—Ç—å XP –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', async () => {
      const mockAchievement = { name: 'Philosopher', description: 'Test', icon: 'üß†', xpReward: 30 }
      mockGameStore.unlockAchievement.mockResolvedValueOnce(mockAchievement)
      
      const leveledUp = await store.gainPhilosophyXP()
      
      expect(store.currentXP).toBe(80) // 30 (achievement) + 50 (philosophy XP)
      expect(mockGameStore.unlockAchievement).toHaveBeenCalledWith('philosophy-master')
    })
  })

  describe('‚ù§Ô∏è –°–∏—Å—Ç–µ–º–∞ –∂–∏–∑–Ω–µ–π', () => {
    beforeEach(async () => {
      await store.loadSession()
    })

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–Ω–∏–º–∞—Ç—å –∂–∏–∑–Ω–∏', async () => {
      await store.loseLives(1)
      
      expect(store.lives).toBe(2)
      expect(mockUiEventStore.queueShake).toHaveBeenCalledWith('lives')
    })

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–Ω–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∏–∑–Ω–µ–π', async () => {
      await store.loseLives(2)
      
      expect(store.lives).toBe(1)
    })

    it('–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ù–∞ –∫—Ä–∞—é" –ø—Ä–∏ 1 –∂–∏–∑–Ω–∏', async () => {
      const mockAchievement = { name: 'On Edge', description: 'Test', icon: '‚ö†Ô∏è', xpReward: 15 }
      mockGameStore.unlockAchievement.mockResolvedValueOnce(mockAchievement)
      
      await store.loseLives(2) // –° 3 –¥–æ 1
      
      expect(store.lives).toBe(1)
      expect(mockGameStore.unlockAchievement).toHaveBeenCalledWith('on-the-edge')
      expect(store.currentXP).toBe(15) // XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    })

    // –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    it.skip('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—Ç—å Game Over –º–æ–¥–∞–ª –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –≤—Å–µ—Ö –∂–∏–∑–Ω–µ–π', async () => {
      // –ú–æ–∫–∞–µ–º modalStore.openGameOverModal
      const openGameOverModalSpy = vi.fn()
      mockModalStore.openGameOverModal = openGameOverModalSpy
      
      // –ù–∞–ø—Ä—è–º—É—é –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ—Ä–∞
      store.$patch((state) => {
        if (state.session) {
          state.session.lives = 0;
          state.session.gameCompleted = true;
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      expect(store.lives).toBe(0)
      expect(store.gameCompleted).toBe(true)
      expect(store.isAlive).toBe(false)
    })

    // –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    it.skip('–Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–Ω–∏–º–∞—Ç—å –∂–∏–∑–Ω–∏ –Ω–∏–∂–µ 0', async () => {
      // –ù–∞–ø—Ä—è–º—É—é –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ—Ä–∞
      store.$patch((state) => {
        if (state.session) {
          state.session.lives = 0;
        }
      });
      
      expect(store.lives).toBe(0)
    })

    it('losePhilosophyLife –¥–æ–ª–∂–µ–Ω –æ—Ç–Ω–∏–º–∞—Ç—å –∂–∏–∑–Ω–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É', async () => {
      const isGameOver = await store.losePhilosophyLife()
      
      expect(store.lives).toBe(2) // 3 - 1 (philosophyWrongLives)
      expect(isGameOver).toBe(false)
    })

    // –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    it.skip('losePhilosophyLife –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –ø—Ä–∏ Game Over', async () => {
      // –ù–∞–ø—Ä—è–º—É—é –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ—Ä–∞
      store.$patch((state) => {
        if (state.session) {
          state.session.lives = 0;
          state.session.gameCompleted = true;
        }
      });
      
      expect(store.lives).toBe(0)
      expect(store.gameCompleted).toBe(true)
    })
  })

  describe('üé® Computed —Å–≤–æ–π—Å—Ç–≤–∞', () => {
    beforeEach(async () => {
      await store.loadSession()
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å xpProgress', () => {
      store.session!.currentXP = 50
      store.session!.currentLevel = 1
      
      // –ú–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º 1 (0 XP) –∏ —É—Ä–æ–≤–Ω–µ–º 2 (100 XP)
      // 50 XP = 50% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      expect(store.xpProgress).toBe(50)
    })

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è', () => {
      store.session!.currentLevel = 5
      store.session!.currentXP = 1500
      
      expect(store.xpProgress).toBe(100)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å nextLevelXP', () => {
      store.session!.currentLevel = 2
      
      expect(store.nextLevelXP).toBe(250) // –£—Ä–æ–≤–µ–Ω—å 3 —Ç—Ä–µ–±—É–µ—Ç 250 XP
    })

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0 nextLevelXP –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è', () => {
      store.session!.currentLevel = 5
      
      expect(store.nextLevelXP).toBe(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å canLevelUp', () => {
      store.session!.currentLevel = 1
      store.session!.currentXP = 99
      expect(store.canLevelUp).toBe(false)
      
      store.session!.currentXP = 100
      expect(store.canLevelUp).toBe(true)
      
      store.session!.currentLevel = 5
      expect(store.canLevelUp).toBe(false) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    })
  })

  describe('üèÉ –î–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏', () => {
    beforeEach(async () => {
      await store.loadSession()
    })

    it('visitBubble –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –ø—É–∑—ã—Ä—å –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ', async () => {
      await store.visitBubble('bubble-1')
      
      expect(store.visitedBubbles).toContain('bubble-1')
    })

    it('visitBubble –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã', async () => {
      await store.visitBubble('bubble-1')
      await store.visitBubble('bubble-1')
      
      expect(store.visitedBubbles).toEqual(['bubble-1'])
    })

    it('updateAgreementScore –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—á–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è', async () => {
      await store.updateAgreementScore(10)
      expect(store.agreementScore).toBe(10)
      
      await store.updateAgreementScore(5)
      expect(store.agreementScore).toBe(15)
    })

    it('resetSession –¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º', async () => {
      // –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      store.session!.currentXP = 150
      store.session!.currentLevel = 3
      store.session!.lives = 1
      store.session!.gameCompleted = true
      
      await store.resetSession()
      
      expect(store.currentXP).toBe(0)
      expect(store.currentLevel).toBe(1)
      expect(store.lives).toBe(3)
      expect(store.gameCompleted).toBe(false)
      expect(store.session!.hasDestroyedToughBubble).toBe(false)
      expect(mockModalStore.openWelcome).toHaveBeenCalled()
      expect(window.dispatchEvent).toHaveBeenCalledWith(
        expect.objectContaining({ type: 'game-reset' })
      )
    })

    it('unlockFirstToughBubbleAchievement –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', async () => {
      const mockAchievement = { 
        name: 'Tough Breaker', 
        description: 'Test', 
        icon: 'üí™', 
        xpReward: 40 
      }
      mockGameStore.unlockAchievement.mockResolvedValueOnce(mockAchievement)
      
      await store.unlockFirstToughBubbleAchievement()
      
      expect(store.session!.hasDestroyedToughBubble).toBe(true)
      expect(store.currentXP).toBe(40)
      expect(mockGameStore.unlockAchievement).toHaveBeenCalledWith('tough-bubble-popper')
      expect(mockModalStore.queueOrShowAchievement).toHaveBeenCalledWith({
        title: mockAchievement.name,
        description: mockAchievement.description,
        icon: mockAchievement.icon,
        xpReward: mockAchievement.xpReward
      })
    })

    it('unlockFirstToughBubbleAchievement –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', async () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
      store.session!.hasDestroyedToughBubble = true
      
      await store.unlockFirstToughBubbleAchievement()
      
      expect(mockGameStore.unlockAchievement).not.toHaveBeenCalled()
    })

    it('clearError –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –æ—à–∏–±–∫—É', () => {
      store.error = 'Test error'
      
      store.clearError()
      
      expect(store.error).toBe(null)
    })

    it('getSession –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é', () => {
      const session = store.getSession()
      
      expect(session).toBe(store.session)
    })
  })

  describe('üîß Edge Cases', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å gainXP –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
      store.session = null
      
      const result = await store.gainXP(50)
      
      expect(result).toBe(false)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å loseLives –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
      store.session = null
      
      await expect(store.loseLives(1)).resolves.not.toThrow()
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å visitBubble –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
      store.session = null
      
      await expect(store.visitBubble('test')).resolves.not.toThrow()
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å updateAgreementScore –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
      store.session = null
      
      await expect(store.updateAgreementScore(10)).resolves.not.toThrow()
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å unlockFirstToughBubbleAchievement –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
      store.session = null
      
      await expect(store.unlockFirstToughBubbleAchievement()).resolves.not.toThrow()
      expect(mockGameStore.unlockAchievement).not.toHaveBeenCalled()
    })
  })

  describe('üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π lifecycle –∏–≥—Ä—ã', async () => {
      // 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏
      await store.loadSession()
      expect(store.currentLevel).toBe(1)
      expect(store.lives).toBe(3)
      
      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ XP –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      await store.gainXP(100)
      expect(store.currentLevel).toBe(2)
      
      // 3. –ü–æ—Å–µ—â–µ–Ω–∏–µ –ø—É–∑—ã—Ä–µ–π
      await store.visitBubble('bubble-1')
      await store.visitBubble('bubble-2')
      expect(store.visitedBubbles.length).toBe(2)
      
      // 4. –ü–æ—Ç–µ—Ä—è –∂–∏–∑–Ω–∏
      await store.loseLives(1)
      expect(store.lives).toBe(2)
      
      // 5. Tough bubble achievement
      await store.unlockFirstToughBubbleAchievement()
      expect(store.session!.hasDestroyedToughBubble).toBe(true)
      
      // 6. –°–±—Ä–æ—Å –∏–≥—Ä—ã
      await store.resetSession()
      expect(store.currentLevel).toBe(1)
      expect(store.lives).toBe(3)
      expect(store.visitedBubbles.length).toBe(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å multiple level ups –ø–æ–¥—Ä—è–¥', async () => {
      await store.loadSession()
      
      // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
      await store.gainXP(300) // –î–æ–ª–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –¥–æ —É—Ä–æ–≤–Ω—è 3
      
      expect(store.currentLevel).toBe(3)
      expect(store.currentXP).toBe(300)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Game Over scenario', async () => {
      await store.loadSession()
      
      // –ü–æ—Ç–µ—Ä—è –≤—Å–µ—Ö –∂–∏–∑–Ω–µ–π —á–µ—Ä–µ–∑ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
      store.session!.lives = 1
      const gameOver = await store.losePhilosophyLife()
      
      expect(gameOver).toBe(true)
      expect(store.gameCompleted).toBe(true)
      expect(mockModalStore.openGameOverModal).toHaveBeenCalled()
    })
  })
}) 