{
  "questions": [
    {
      "id": "test-assignments",
      "type": "philosophy",
      "question": "Ваше отношение к тестовым заданиям при найме?",
      "options": [
        {
          "id": "required",
          "text": "Обязательны для всех кандидатов - показывают реальные навыки",
          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "case-by-case",
          "text": "Зависит от позиции - для джуниоров да, для синьоров можно обойтись",
          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "portfolio-first",
          "text": "Портфолио и опыт важнее искусственных задач",
          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Тестовые задания - это попытка симулировать то, что можно увидеть в реальном портфолио. Зачем имитация, когда есть оригинал?"
    },
    {
      "id": "work-life-balance",
      "type": "philosophy",
      "question": "Как вы относитесь к работе в нерабочее время?",
      "options": [
        {
          "id": "dedication",
          "text": "Настоящие профессионалы работают 24/7, отдых для слабых",
          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "urgent-only",
          "text": "Иногда нужно - форс-мажоры случаются",
          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "boundaries",
          "text": "Здоровые границы между работой и жизнью - основа продуктивности",
          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Лучший код пишется отдохнувшим мозгом, а не в 2 часа ночи после 12-часового рабочего дня."
    },
    {
      "id": "code-quality",
      "type": "philosophy", 
      "question": "Что важнее при разработке?",
      "options": [
        {
          "id": "speed-only",
          "text": "Скорость разработки - главное, качество потом доведем",
          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "balance",
          "text": "Баланс между скоростью и качеством, зависит от контекста",
          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "quality-first",
          "text": "Качество кода - фундамент, скорость придет с опытом",
          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Быстрый плохой код замедляет разработку в долгосрочной перспективе больше, чем медленный хороший код."
    },
    {
      "id": "agile-ceremonies",
      "type": "philosophy",
      "question": "Ваше отношение к Agile-церемониям?",
      "options": [
        {
          "id": "more-meetings",
          "text": "Чем больше митингов, тем лучше координация",
          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "necessary-evil",
          "text": "Необходимое зло, но лучше их минимизировать",
          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "value-driven",
          "text": "Только те, что приносят реальную ценность команде",
          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Agile Manifesto говорит 'люди важнее процессов'. Если процесс мешает людям - меняйте процесс."
    },
    {
      "id": "technical-debt",
      "type": "philosophy",
      "question": "Как управлять техническим долгом?",
      "options": [
        {
          "id": "ignore-debt",
          "text": "Фичи важнее рефакторинга, долг можно игнорировать",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "planned-cleanup",
          "text": "Выделять время на рефакторинг в каждом спринте",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "prevent-debt",
          "text": "Лучше предотвращать долг, чем потом расплачиваться",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Технический долг - не метафора. Как и финансовый долг, он накапливает проценты и может привести к банкротству проекта."
    },
    {
      "id": "learning-time",
      "type": "philosophy",
      "question": "Должна ли компания выделять время на обучение?",
      "options": [
        {
          "id": "own-time",
          "text": "Обучение - личная ответственность, учитесь в свободное время",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "some-time",
          "text": "Немного времени можно выделить, но не в ущерб задачам",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "invest-in-team",
          "text": "Инвестиции в развитие команды - инвестиции в продукт",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Команда, которая не развивается, деградирует. Технологии не стоят на месте, и команда тоже не должна."
    },
    {
      "id": "documentation",
      "type": "philosophy",
      "question": "Роль документации в проекте?",
      "options": [
        {
          "id": "waste-of-time",
          "text": "Тратить время на документацию - роскошь, код сам себя документирует",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "minimal-docs",
          "text": "Минимально необходимая документация для ключевых решений",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "living-docs",
          "text": "Живая документация - часть архитектуры, обновляется вместе с кодом",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Хорошая документация - это не описание кода, а объяснение решений. Почему выбрали именно этот подход?"
    },
    {
      "id": "code-reviews",
      "type": "philosophy",
      "question": "Как должны проходить код-ревью?",
      "options": [
        {
          "id": "nitpicking",
          "text": "Придираться к каждой мелочи - так код становится идеальным",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "constructive",
          "text": "Конструктивная критика с объяснением альтернатив",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "knowledge-sharing",
          "text": "Инструмент обучения и обмена знаниями в команде",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Код-ревью — это не экзамен, а возможность поделиться знаниями и улучшить продукт вместе."
    },
    {
      "id": "legacy-code",
      "type": "philosophy",
      "question": "Что делать с легаси-кодом?",
      "options": [
        {
          "id": "rewrite-everything",
          "text": "Переписать всё с нуля - старый код только мешает",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "gradual-refactoring",
          "text": "Постепенный рефакторинг по мере работы с модулями",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "understand-first",
          "text": "Сначала понять почему код именно такой, потом улучшать",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Легаси-код — это не технический долг, а накопленная мудрость. Главное — научиться её читать."
    },
    {
      "id": "junior-mentoring",
      "type": "philosophy",
      "question": "Как правильно менторить джуниоров?",
      "options": [
        {
          "id": "sink-or-swim",
          "text": "Дать сложную задачу и пусть сами разбираются",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "step-by-step",
          "text": "Давать задачи по нарастающей с объяснением подходов",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "teach-thinking",
          "text": "Учить не решениям, а способам мышления и поиска ответов",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Лучший ментор не тот, кто знает все ответы, а тот, кто учит задавать правильные вопросы."
    },
    {
      "id": "technology-choices",
      "type": "philosophy",
      "question": "Как выбирать технологии для проекта?",
      "options": [
        {
          "id": "latest-trends",
          "text": "Всегда использовать самые новые и популярные технологии",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "proven-reliable",
          "text": "Проверенные временем решения с хорошей экосистемой",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "problem-driven",
          "text": "Исходя из специфики задачи и ограничений проекта",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Лучшая технология — не самая новая или популярная, а та, которая решает конкретную проблему с минимальными рисками."
    },
    {
      "id": "estimates-and-deadlines",
      "type": "philosophy",
      "question": "Как относиться к оценкам времени и дедлайнам?",
      "options": [
        {
          "id": "always-commit",
          "text": "Всегда соглашаться с дедлайнами — команда должна быть гибкой",

          "agreementLevel": 0,
          "livesLost": 1
        },
        {
          "id": "buffer-included",
          "text": "Давать реалистичные оценки с запасом на непредвиденное",

          "agreementLevel": 1,
          "livesLost": 0
        },
        {
          "id": "iterative-refinement",
          "text": "Итеративно уточнять оценки по мере изучения задачи",

          "agreementLevel": 2,
          "livesLost": 0
        }
      ],
      "insight": "Хорошая оценка — не точное число, а честная оценка неопределённости. Планирование — это непрерывный процесс."
    }
  ]
}